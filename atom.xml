<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>飞翔的傻瓜</title>
  
  <subtitle>菜鸟的试飞之旅</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.maoxin.site/"/>
  <updated>2018-11-04T08:42:28.677Z</updated>
  <id>http://www.maoxin.site/</id>
  
  <author>
    <name>FlyingFool</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CORS跨域问题的认识与解决</title>
    <link href="http://www.maoxin.site/2018/11/04/HTTP-02/"/>
    <id>http://www.maoxin.site/2018/11/04/HTTP-02/</id>
    <published>2018-11-04T07:01:00.000Z</published>
    <updated>2018-11-04T08:42:28.677Z</updated>
    
    <content type="html"><![CDATA[<p>之前曾经见过跨域问题的解决方式，一个是CORS，一个是JSONP，但是就是处于知其然，不知其所以然的阶段，因此在这里借助网上资料和Node.js来分析和解决如上问题<br><a id="more"></a></p><h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p>除去一些常用标签的<code>src</code>，<code>image</code>以及<code>link</code>等属性是可以进行跨域的，一般的其他请求尤其是<code>json</code>请求是不能进行跨域的，否则会出现问题，按照如下方式初始化<code>node.js</code>代码，进行跨域测试：</p><ul><li>Server.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"get request form"</span>,request.url)</span><br><span class="line">    response.end(<span class="string">"HelloWorld"</span>)</span><br><span class="line">&#125;).listen(<span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Server listening on 8887"</span>)</span><br></pre></td></tr></table></figure><ul><li>Server2.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,responce</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Server2 request form"</span>,request.url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> html = fs.readFileSync(<span class="string">'test.html'</span>,<span class="string">"utf-8"</span>)</span><br><span class="line">    responce.writeHead(<span class="number">200</span>,&#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>:<span class="string">'text/html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    responce.end(html)</span><br><span class="line">&#125;).listen(<span class="number">8889</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Server 2 Listening..."</span>)</span><br></pre></td></tr></table></figure><p>在Server2.js中无论请求如何都会返回一个html页面，该页面主要包含如下请求代码</p><ul><li>html中的js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'GET'</span>,<span class="string">'http://127.0.0.1:8888/'</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><p>向服务器2进行Http请求控制台信息如图所示</p><p><img src="1.png" alt="错误信息"></p><p>可见，其提示<code>No Access-Control-Allow-Origin</code> ,表示没有Access-Control-Allow-Origin头部信息，无法访问资源</p><p>我们修改服务器添加头信息为<code>Access-Control-Allow-Origin:*</code>在Server1中添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">response.writeHead(<span class="number">200</span>,&#123;</span><br><span class="line">       <span class="string">'Access-Control-Allow-Origin'</span>:<span class="string">'*'</span></span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><p>之后就不会报错了，打开控制台的NetWork栏，可以查看到”HelloWorld”字符串</p><h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><p>由于浏览器允许如文章开始描述的在标签内部访问，所以就可以实现跨域，这也是JSONP的原理，而只要服务器返回的信息满足json这样可以被js原生支持，客户端就会很容易的去处理，在这里我们模拟一种JSONP的方式返回信息</p><p>修改Server1的代码为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.end(<span class="string">'&#123;"result":2018&#125;'</span>)</span><br></pre></td></tr></table></figure><p>查看浏览器NetWork，发现返回成功</p><p><img src="2.png" alt="成功"></p><h2 id="CORS跨域的限制"><a href="#CORS跨域的限制" class="headerlink" title="CORS跨域的限制"></a>CORS跨域的限制</h2><p>不是只要设置了<code>Access-Control-Allow-Origin</code>头部就可以随意跨域了</p><ul><li>允许方法<ul><li>GET</li><li>HEAD</li><li>POST</li></ul></li><li>允许的Content-Type<ul><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul></li><li>请求头。。</li></ul><h3 id="预请求"><a href="#预请求" class="headerlink" title="预请求"></a>预请求</h3><p>之上描述了CORS种种限制，如果想要使用自定义头或者其他Method，浏览器采用了预请求的方式，先发送一个Method=OPTION的请求，根据返回的头信息来判断请求是否合法，而服务器返回如下字段来判断<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'Access-Control-Allow-Origin'</span>:<span class="string">'*'</span>,</span><br><span class="line"><span class="string">'Access-Control-Allow-Headers'</span>:<span class="string">'X-Test-Cors'</span>,</span><br><span class="line"><span class="string">'Access-Control-Allow-Method'</span>:<span class="string">'POST,PUT,DElete'</span>,</span><br><span class="line"><span class="string">'Access-Control-Max-Age'</span>:<span class="string">'1000'</span><span class="comment">//代表1000s之内不用发送预请求</span></span><br></pre></td></tr></table></figure></p><h2 id="练习代码地址"><a href="#练习代码地址" class="headerlink" title="练习代码地址"></a>练习代码地址</h2><blockquote><p><a href="https://gitee.com/lumaoxin/DemoHouse/tree/master/CORS" target="_blank" rel="noopener">https://gitee.com/lumaoxin/DemoHouse/tree/master/CORS</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前曾经见过跨域问题的解决方式，一个是CORS，一个是JSONP，但是就是处于知其然，不知其所以然的阶段，因此在这里借助网上资料和Node.js来分析和解决如上问题&lt;br&gt;
    
    </summary>
    
      <category term="计算机网络" scheme="http://www.maoxin.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="HTTP协议" scheme="http://www.maoxin.site/tags/HTTP%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议的三次握手</title>
    <link href="http://www.maoxin.site/2018/11/04/HTTP-01/"/>
    <id>http://www.maoxin.site/2018/11/04/HTTP-01/</id>
    <published>2018-11-04T06:36:31.000Z</published>
    <updated>2018-11-04T06:55:48.330Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP协议是基于TCP的，一个TCP请求可以传送多个请求，在HTTP0.9/1.0中，连接建立，请求发送得到响应之后，HTTP链接就被关闭了。而在HTTP/1.1中链接会得到一定的保持（长链接),之所以会有这样的改进是因为创建链接的开销太大，需要三次握手（TCP的三次握手）<br><a id="more"></a></p><h2 id="为什么需要三次握手？"><a href="#为什么需要三次握手？" class="headerlink" title="为什么需要三次握手？"></a>为什么需要三次握手？</h2><ol><li>Client发出请求，传递到服务器（此时客户端不知道Server能否联通）</li><li>Server得到了请求，向Client发出一个确认，此时服务器不知道Client能否收到数据</li><li>客户端收到请求之后，知道Client和Server通信没问题，问题是Server不知道自己的信送到了没？所以Client再次发送一个确认包。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTTP协议是基于TCP的，一个TCP请求可以传送多个请求，在HTTP0.9/1.0中，连接建立，请求发送得到响应之后，HTTP链接就被关闭了。而在HTTP/1.1中链接会得到一定的保持（长链接),之所以会有这样的改进是因为创建链接的开销太大，需要三次握手（TCP的三次握手）&lt;br&gt;
    
    </summary>
    
      <category term="计算机网络" scheme="http://www.maoxin.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="HTTP协议" scheme="http://www.maoxin.site/tags/HTTP%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>7种方式去重构Java的Switch语句</title>
    <link href="http://www.maoxin.site/2018/10/27/design-1/"/>
    <id>http://www.maoxin.site/2018/10/27/design-1/</id>
    <published>2018-10-27T03:18:25.000Z</published>
    <updated>2018-11-01T09:26:54.627Z</updated>
    
    <content type="html"><![CDATA[<p>自己翻译的，英语渣，其实看代码意思就都能理解，这里放上原网址<br><a id="more"></a></p><blockquote><p><a href="https://www.developer.com/java/data/seven-ways-to-refactor-java-switch-statements.html" target="_blank" rel="noopener">https://www.developer.com/java/data/seven-ways-to-refactor-java-switch-statements.html</a></p></blockquote><h2 id="1-通过Java的枚举实现策略模式"><a href="#1-通过Java的枚举实现策略模式" class="headerlink" title="1.通过Java的枚举实现策略模式"></a>1.通过Java的枚举实现策略模式</h2><p>一个典型的例子涉及到一个Java的枚举，并且在枚举的基础上有一个或者多个switch语句，让我们假设有如下简单的Java枚举，代表不同的运动员类型<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> PlayerTypes &#123;</span><br><span class="line">    TENNIS,FOOTBALL,SNOOKER</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面的switch语句用来创建不同类型的“运动员”<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerCreator</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Player <span class="title">createPlayer</span><span class="params">(PlayerTypes playerType)</span></span>&#123; </span><br><span class="line">        <span class="keyword">switch</span> (playerType) &#123;</span><br><span class="line">            <span class="keyword">case</span> TENNIS:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> TennisPlayer();</span><br><span class="line">            <span class="keyword">case</span> FOOTBALL:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> FootballPlayer();</span><br><span class="line">            <span class="keyword">case</span> SNOOKER:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SnookerPlayer();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid player type: "</span></span><br><span class="line">                    + playerType);</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>想要创建网球运动员，就使用<code>PlayerTypes.TENNIS</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PlayerCreator playerCreator = <span class="keyword">new</span> PlayerCreator();</span><br><span class="line">Player tennisPlayer =</span><br><span class="line">   playerCreator.createPlayer(PlayerTypes.TENNIS);</span><br></pre></td></tr></table></figure></p><h3 id="依赖使用常量特定方法实现的枚举"><a href="#依赖使用常量特定方法实现的枚举" class="headerlink" title="依赖使用常量特定方法实现的枚举"></a>依赖使用常量特定方法实现的枚举</h3><p>但是，这里有一种更好的方式去将每个枚举常量本身和其行为联系在一起，这种方式被称为：具有常量特定方法实现的枚举类型（enum type with constant-specific method implementation）并且它在Joshua Bloch的《Effective Java 第二版》中被描述。遵循着这一思想，我们可以通过增加一个抽象的方法来丰富我们的<code>playertypes</code>枚举类，而对于枚举类中的每个值，我们提供一个实现，如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> PlayerTypes &#123; </span><br><span class="line">TENNIS &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Player <span class="title">createPlayer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> TennisPlayer();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br><span class="line">FOOTBALL &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Player <span class="title">createPlayer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> FootballPlayer();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br><span class="line">SNOOKER &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Player <span class="title">createPlayer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> SnookerPlayer();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Player <span class="title">createPlayer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果想要创建一个足球运动员,使用<code>PlayersType.FOOTBLL</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Player footballPlayer =</span><br><span class="line">   PlayerTypes.valueOf(<span class="string">"FOOTBALL"</span>).createPlayer();</span><br></pre></td></tr></table></figure></p><h2 id="2-实现命令模式"><a href="#2-实现命令模式" class="headerlink" title="2.实现命令模式"></a>2.实现命令模式</h2><p>现在，让我们写一个同样的<code>switch</code>逻辑，但是是基于字符串类型的，在Java 7及以上，我们是可以使用一个字符串对象放在switch语句中，毕竟，大多数的Java编译器将会针对这种实现方式生成比类似<code>if-else-if</code>链更加高效的字节码，当然，这并不是太坏:),但是，一个siwtch仍然使得类与类之间的关系错综复杂，并且缺点也是一样的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerCreator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Player <span class="title">createPlayer</span><span class="params">(String playerType)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">switch</span> (playerType) &#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">"TENNIS"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TennisPlayer();</span><br><span class="line">         <span class="keyword">case</span> <span class="string">"FOOTBALL"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FootballPlayer();</span><br><span class="line">         <span class="keyword">case</span> <span class="string">"SNOOKER"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SnookerPlayer();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException</span><br><span class="line">               (<span class="string">"Invalid player type: "</span> + playerType);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建一个网球运动员只需要一个“TENNIS”<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PlayerCreator playerCreator = <span class="keyword">new</span> PlayerCreator();</span><br><span class="line">Player tennisPlayer = playerCreator.createPlayer(<span class="string">"TENNIS"</span>);</span><br></pre></td></tr></table></figure></p><h3 id="实现命令模式"><a href="#实现命令模式" class="headerlink" title="实现命令模式"></a>实现命令模式</h3><p>另外，我们可以依赖“命令”模式，我们可以通过两步来构建命令模式，首先，我们定义一个接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">   <span class="function">Player <span class="title">create</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着，我们为每个运动员类型类型提供对应该接口的具体实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreatePlayerCommand</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Command&gt; PLAYERS;</span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> Map&lt;String, Command&gt; players = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      players.put(<span class="string">"TENNIS"</span>, <span class="keyword">new</span> Command() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> Player <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TennisPlayer();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      players.put(<span class="string">"FOOTBALL"</span>, <span class="keyword">new</span> Command() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> Player <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FootballPlayer();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      players.put(<span class="string">"SNOOKER"</span>, <span class="keyword">new</span> Command() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> Player <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SnookerPlayer();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      PLAYERS = Collections.unmodifiableMap(players);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Player <span class="title">createPlayer</span><span class="params">(String playerType)</span> </span>&#123;</span><br><span class="line">      Command command = PLAYERS.get(playerType);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (command == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid player type: "</span></span><br><span class="line">            + playerType);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> command.create();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样，创建一个斯诺克运动员<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CreatePlayerCommand createCommand = <span class="keyword">new</span> CreatePlayerCommand();</span><br><span class="line">Player snookerPlayer = createCommand.createPlayer(<span class="string">"SNOOKER"</span>);</span><br></pre></td></tr></table></figure></p><h2 id="3-使用Java8以及之后版本的Supplier接口"><a href="#3-使用Java8以及之后版本的Supplier接口" class="headerlink" title="3.使用Java8以及之后版本的Supplier接口"></a>3.使用Java8以及之后版本的Supplier接口</h2><p>将Switch语句的内容转换为一个<code>Map</code>类型是一种常用方法，这个想法的关键是将每一个<code>case</code>分支作为<code>Map</code>的值并且使用<code>case</code>的条件作为key，在Java 8以及之后的版本，我们可以充分利用<code>Supplier</code>和构造器引用，因此，让我们创建一个Map通过使用类的名字和关键字new一个构造器的引用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerSupplier</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Supplier&lt;Player&gt;&gt;</span><br><span class="line">      PLAYER_SUPPLIER;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> Map&lt;String, Supplier&lt;Player&gt;&gt;</span><br><span class="line">         players = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      players.put(<span class="string">"TENNIS"</span>, TennisPlayer::<span class="keyword">new</span>);</span><br><span class="line">      players.put(<span class="string">"FOOTBALL"</span>, FootballPlayer::<span class="keyword">new</span>);</span><br><span class="line">      players.put(<span class="string">"SNOOKER"</span>, SnookerPlayer::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">      PLAYER_SUPPLIER = Collections.unmodifiableMap(players);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Player <span class="title">supplyPlayer</span><span class="params">(String playerType)</span> </span>&#123;</span><br><span class="line">      Supplier&lt;Player&gt; player = PLAYER_SUPPLIER.get(playerType);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (player == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid player type: "</span></span><br><span class="line">            + playerType);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> player.get();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样创建一个斯诺克运动员：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PlayerSupplier playerSupplier = <span class="keyword">new</span> PlayerSupplier();</span><br><span class="line">Player snookerPlayer = playerSupplier.supplyPlayer(<span class="string">"SNOOKER"</span>);</span><br></pre></td></tr></table></figure></p><h2 id="4-定义一个通用的函数式接口"><a href="#4-定义一个通用的函数式接口" class="headerlink" title="4.定义一个通用的函数式接口"></a>4.定义一个通用的函数式接口</h2><p>与第三点几乎相似的实现如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputeTennisPlayerStatistics</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">ComputeTennisPlayerStatistics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">computeTrend</span><span class="params">(TennisPlayer tennisPlayer,</span></span></span><br><span class="line"><span class="function"><span class="params">         Period period, String owner, String trend)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">switch</span> (trend) &#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">"SERVE"</span>:</span><br><span class="line">            <span class="keyword">return</span> Statistics.computeServeTrend(tennisPlayer,</span><br><span class="line">               period, owner);</span><br><span class="line">         <span class="keyword">case</span> <span class="string">"FOREHAND"</span>:</span><br><span class="line">            <span class="keyword">return</span> Statistics.computeForehandTrend(tennisPlayer,</span><br><span class="line">               period, owner);</span><br><span class="line">         <span class="keyword">case</span> <span class="string">"BACKHAND"</span>:</span><br><span class="line">            <span class="keyword">return</span> Statistics.computeBackhandTrend(tennisPlayer,</span><br><span class="line">               period, owner);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException</span><br><span class="line">               (<span class="string">"Invalid trend attribute: "</span> + trend);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>得到SERVE趋势(我们使用了伪参数，在这里他们并不相关):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String serveTrend = ComputeTennisPlayerStatistics.</span><br><span class="line">computeTrend(<span class="keyword">new</span> TennisPlayer(), Period.ZERO, <span class="string">"TENNIS MAGAZINE"</span>,</span><br><span class="line">   <span class="string">"SERVE"</span>);</span><br></pre></td></tr></table></figure></p><h3 id="实现-TriFunction-接口"><a href="#实现-TriFunction-接口" class="headerlink" title="实现 TriFunction 接口"></a>实现 TriFunction 接口</h3><p>这次，每个case语句执行一个接受三个参数的静态方法并且返回一个字符串类型，在这样的情况下，一个<code>Supplier</code>不能使用，因为我们有多于两个参数，我们不能使用<code>BiFunction</code>,在这里有一个方法将会通过我们定义自己的函数式接口，之后和我们之前使用Map一样<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TriFunction</span>&lt;<span class="title">T</span>, <span class="title">U</span>, <span class="title">V</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function">R <span class="title">apply</span><span class="params">(T t, U u, V v)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionalStatistics</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">FunctionalStatistics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, TriFunction&lt;TennisPlayer,</span><br><span class="line">         Period, String, String&gt;&gt;</span><br><span class="line">      STATISTICS = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">      STATISTICS.put(<span class="string">"SERVE"</span>, Statistics::computeServeTrend);</span><br><span class="line">      STATISTICS.put(<span class="string">"FOREHAND"</span>, Statistics::computeForehandTrend);</span><br><span class="line">      STATISTICS.put(<span class="string">"BACKHAND"</span>, Statistics::computeBackhandTrend);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">computeTrend</span><span class="params">(TennisPlayer tennisPlayer,</span></span></span><br><span class="line"><span class="function"><span class="params">      Period period, String owner, String trend)</span> </span>&#123;</span><br><span class="line">      TriFunction&lt;TennisPlayer, Period, String, String&gt;</span><br><span class="line">            function = STATISTICS.get(trend);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (function == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid trend type: "</span></span><br><span class="line">            + trend);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> function.apply(tennisPlayer, period, owner);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>得到 FOREHAND 趋势 (我们使用了伪参数，在这里他们并不相关):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String forehandTrend = FunctionalStatistics.</span><br><span class="line">computeTrend(<span class="keyword">new</span> TennisPlayer(), Period.ZERO, <span class="string">"SPORT TV"</span>,</span><br><span class="line">   <span class="string">"FOREHAND"</span>);</span><br></pre></td></tr></table></figure></p><h2 id="5-依赖抽象工厂"><a href="#5-依赖抽象工厂" class="headerlink" title="5. 依赖抽象工厂"></a>5. 依赖抽象工厂</h2><p>在这个小结，我们将会遵循Robert C. Martin的代码整洁之道的相关内容，我们以一个可以通过抽象工厂设计模式来隐藏的<code>switch</code>开始<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassicPlayer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Type type;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> delta;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ClassicPlayer</span><span class="params">(Type type, <span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.type = type;</span><br><span class="line">      <span class="keyword">this</span>.delta = delta;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> type;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDelta</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> delta;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Statistics</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">playerEndurance</span><span class="params">(ClassicPlayer player)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> delta = player.getDelta();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">switch</span> (player.getType()) &#123;</span><br><span class="line">         <span class="keyword">case</span> TENNIS:</span><br><span class="line">            <span class="keyword">return</span> ComputeEnduranceAlgorithm.basicEndurance(delta)</span><br><span class="line">               + ComputeEnduranceAlgorithm.hardEndurance(delta);</span><br><span class="line">         <span class="keyword">case</span> FOOTBALL:</span><br><span class="line">            <span class="keyword">return</span> ComputeEnduranceAlgorithm.hardEndurance(delta)</span><br><span class="line">               * ComputeEnduranceAlgorithm.factorEndurance(delta);</span><br><span class="line">         <span class="keyword">case</span> SNOOKER:</span><br><span class="line">            <span class="keyword">return</span> ComputeEnduranceAlgorithm.basicEndurance(delta);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException</span><br><span class="line">               (<span class="string">"Invalid player type: "</span> + player.getType());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>计算一个网球运动员的耐力如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Statistics statistics = <span class="keyword">new</span> Statistics();</span><br><span class="line"></span><br><span class="line">ClassicPlayer player = <span class="keyword">new</span> ClassicPlayer(Type.TENNIS, <span class="number">54</span>);</span><br><span class="line"><span class="keyword">int</span> tennisPlayerEndurance = statistics.playerEndurance(player);</span><br></pre></td></tr></table></figure></p><p>当然，这是一个混乱的实现，想象一下你需要去添加另外一个方法去计算一个运动员的反应速度，这将需要另外一个<code>switch</code>语句，也许你将在每个case分支中嵌套更多的if并且重命名之前的方法名类似playerStatistics,每次一个新的方法将被增加，代码就需要进行相应的调整</p><h2 id="实现抽象工厂模式"><a href="#实现抽象工厂模式" class="headerlink" title="实现抽象工厂模式"></a>实现抽象工厂模式</h2><p>我们可以重写这个代码通过使用多态性性并且和一个抽象工厂方法的实线，首先，我们删除<code>ClasssicPlayer</code>类并且创建一个抽象类<code>player</code>如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Type type;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> delta;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Player</span><span class="params">(Type type, <span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.type = type;</span><br><span class="line">      <span class="keyword">this</span>.delta = delta;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> type;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDelta</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> delta;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">playerEndurance</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// More similar methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在我们可以实现一个足球,网球，和斯诺克等运动员类，比如，一个斯诺克运动员类如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnookerPlayer</span> <span class="keyword">extends</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">SnookerPlayer</span><span class="params">(Type type, <span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(type, delta);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">playerEndurance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> ComputeEnduranceAlgorithm.basicEndurance</span><br><span class="line">         (<span class="keyword">this</span>.getDelta());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>更进一步，我们创建一个运动员工厂(AbstractPlayerFactory)接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbstractPlayerFactory</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Player <span class="title">createPlayer</span><span class="params">(Type type, <span class="keyword">int</span> delta)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最终，我们将switch的实现埋在这个接口的实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerFactory</span> <span class="keyword">implements</span> <span class="title">AbstractPlayerFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Player <span class="title">createPlayer</span><span class="params">(Type type, <span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">         <span class="keyword">case</span> TENNIS:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TennisPlayer(type, delta);</span><br><span class="line">         <span class="keyword">case</span> FOOTBALL:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FootballPlayer(type, delta);</span><br><span class="line">         <span class="keyword">case</span> SNOOKER:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SnookerPlayer(type, delta);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">default</span>:</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid player type: "</span></span><br><span class="line">            + type);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>计算一个斯诺克运动员的耐力<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PlayerFactory playerFactory = <span class="keyword">new</span> PlayerFactory();</span><br><span class="line">Player snookerPlayer = playerFactory.createPlayer(Type.SNOOKER, <span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> snookerPlayerEndurance = snookerPlayer.playerEndurance();</span><br></pre></td></tr></table></figure></p><p>或者，我们可以直接初始化一个正确的Player类，而完全不使用Switch<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SnookerPlayer snookerPlayer = <span class="keyword">new</span> SnookerPlayer(<span class="number">7</span>);</span><br><span class="line"><span class="keyword">int</span> snookerPlayerEndurance  = snookerPlayer.playerEndurance();</span><br></pre></td></tr></table></figure></p><h2 id="6-实现状态模式"><a href="#6-实现状态模式" class="headerlink" title="6.实现状态模式"></a>6.实现状态模式</h2><p>让我们假设我们有如下两个相互依存的switch<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassicPlayer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">         state = <span class="number">1</span>; System.out.println(<span class="string">"Registering ..."</span>);</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">         System.out.println(<span class="string">"Aready Registered ..."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            state = <span class="number">0</span>;</span><br><span class="line">            System.out.println(<span class="string">"Un-registering ..."</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">"Aready Unregistered ..."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简而言之，在这个例子中，我们只有两个相互依存的switch结构，并且我们可以调用他们按照如下方式:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ClassicPlayer classicPlayer = <span class="keyword">new</span> ClassicPlayer();</span><br><span class="line">classicPlayer.register();</span><br><span class="line">classicPlayer.unregister();</span><br><span class="line"><span class="comment">// Causes "Already Unregistered ..." message</span></span><br><span class="line">classicPlayer.unregister();</span><br></pre></td></tr></table></figure></p><h3 id="实现状态模式"><a href="#实现状态模式" class="headerlink" title="实现状态模式"></a>实现状态模式</h3><p>跟进一步，让我们应用状态模式去消除这些<code>switch</code>语句，我们首先创建一个接口为我们的状态定义一些方法（动作）接口，<code>register</code>and<code>unregister</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PlayerState</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">unregister</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们定义一个<code>Player</code>类来实现<code>PlayerState</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">implements</span> <span class="title">PlayerState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> PlayerState registered;</span><br><span class="line">   <span class="keyword">private</span> PlayerState unregistered;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> PlayerState state;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Player</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.registered = <span class="keyword">new</span> PlayerRegister(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">this</span>.unregistered = <span class="keyword">new</span> PlayerUnregister(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.state = <span class="keyword">this</span>.unregistered;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      state.register();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      state.unregister();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以下为Registered、unregistered、state的getter和setter</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> PlayerState <span class="title">getRegistered</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> registered;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRegistered</span><span class="params">(PlayerState registered)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.registered = registered;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> PlayerState <span class="title">getUnregistered</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> unregistered;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUnregistered</span><span class="params">(PlayerState unregistered)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.unregistered = unregistered;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> PlayerState <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(PlayerState state)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.state = state;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PlayerRegister</code>和<code>PlayerUnregister</code>的代码列举在下面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerRegister</span> <span class="keyword">implements</span> <span class="title">PlayerState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Player player;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">PlayerRegister</span><span class="params">(Player player)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.player = player;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Already Registered ..."</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Unregistering ..."</span>);</span><br><span class="line">      player.setState(player.getUnregistered());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerUnregister</span> <span class="keyword">implements</span> <span class="title">PlayerState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Player player;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">PlayerUnregister</span><span class="params">(Player player)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.player = player;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Registering ..."</span>);</span><br><span class="line">      player.setState(player.getRegistered());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Already Unregistered ..."</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们可以创建一个Player并且完成如下状态的切换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Player player = <span class="keyword">new</span> Player();</span><br><span class="line">player.register();</span><br><span class="line">player.unregister();</span><br><span class="line"><span class="comment">// Causes an "Already Unregistered ..." message</span></span><br><span class="line">player.unregister();</span><br></pre></td></tr></table></figure><h2 id="7-通过Predicate来实现"><a href="#7-通过Predicate来实现" class="headerlink" title="7. 通过Predicate来实现"></a>7. 通过Predicate来实现</h2><p>在最后一个例子中，让我们假设在switch语句中的每个case包含多个if分支，如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerCreator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Player <span class="title">createPlayer</span><span class="params">(String playerType, <span class="keyword">int</span> rank)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">switch</span> (playerType) &#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">"TENNIS"</span>:</span><br><span class="line">            <span class="keyword">if</span> (rank == <span class="number">1</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> TennisPlayer(<span class="string">"Rafael Nadal"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (rank &gt; <span class="number">1</span> &amp;&amp; rank &lt; <span class="number">5</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> TennisPlayer(<span class="string">"Roger Federer"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (rank &gt;= <span class="number">5</span> &amp;&amp; rank &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> TennisPlayer(<span class="string">"Andy Murray"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">case</span> <span class="string">"FOOTBALL"</span>:</span><br><span class="line">            <span class="keyword">if</span> (rank == <span class="number">1</span> || rank == <span class="number">2</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> FootballPlayer(<span class="string">"Lionel Messi"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (rank &gt; <span class="number">2</span> &amp;&amp; rank &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> FootballPlayer(<span class="string">"Cristiano Ronaldo"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">case</span> <span class="string">"SNOOKER"</span>:</span><br><span class="line">            <span class="keyword">if</span> (rank == <span class="number">1</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> SnookerPlayer(<span class="string">"Ronnie O'Sullivan"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (rank == <span class="number">2</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> SnookerPlayer(<span class="string">"Mark Selby"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (rank &gt; <span class="number">3</span> &amp;&amp; rank &lt; <span class="number">7</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> SnookerPlayer(<span class="string">"John Higgins"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (rank &gt;= <span class="number">7</span> &amp;&amp; rank &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> SnookerPlayer(<span class="string">"Neil Robertson"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException</span><br><span class="line">               (<span class="string">"Invalid player type: "</span> + playerType);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获得一个输出: <code>Tennis player: Andy Murray</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PlayerCreator playerCreator = <span class="keyword">new</span> PlayerCreator();</span><br><span class="line">Player tennisPlayer = playerCreator.createPlayer(<span class="string">"TENNIS"</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>如果我们假设if语句可以被视作是<code>Predicate&lt;Integer&gt;</code>我们可以重写这个工具类，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerSupplier</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">PlayerSupplier</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String,</span><br><span class="line">      Map&lt;Predicate&lt;Integer&gt;,</span><br><span class="line">      Supplier&lt;Player&gt;&gt;&gt; PLAYER_CREATOR;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> Map&lt;String, Map&lt;Predicate&lt;Integer&gt;,</span><br><span class="line">         Supplier&lt;Player&gt;&gt;&gt; playerCreator = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> Map&lt;Predicate&lt;Integer&gt;,</span><br><span class="line">         Supplier&lt;Player&gt;&gt; tennisPlayers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      tennisPlayers.put(rank -&gt; rank == <span class="number">1</span>, () -&gt;</span><br><span class="line">         <span class="keyword">new</span> TennisPlayer(<span class="string">"Rafael Nadal"</span>));</span><br><span class="line">      tennisPlayers.put(rank -&gt; rank &gt; <span class="number">1</span> &amp;&amp; rank &lt; <span class="number">5</span>, () -&gt;</span><br><span class="line">         <span class="keyword">new</span> TennisPlayer(<span class="string">"Roger Federer"</span>));</span><br><span class="line">      tennisPlayers.put(rank -&gt; rank &gt;= <span class="number">5</span> &amp;&amp; rank &lt;= <span class="number">10</span>, () -&gt;</span><br><span class="line">         <span class="keyword">new</span> TennisPlayer(<span class="string">"Andy Murray"</span>));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> Map&lt;Predicate&lt;Integer&gt;, Supplier&lt;Player&gt;&gt;</span><br><span class="line">         footballPlayers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      footballPlayers.put(rank -&gt; rank == <span class="number">1</span> || rank == <span class="number">2</span>,()-&gt;</span><br><span class="line">         <span class="keyword">new</span> TennisPlayer(<span class="string">"Lionel Messsi"</span>));</span><br><span class="line">      footballPlayers.put(rank -&gt; rank &gt; <span class="number">2</span> &amp;&amp; rank &lt;= <span class="number">10</span>,()-&gt;</span><br><span class="line">         <span class="keyword">new</span> TennisPlayer(<span class="string">"Cristiano Ronaldo"</span>));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> Map&lt;Predicate&lt;Integer&gt;, Supplier&lt;Player&gt;&gt;</span><br><span class="line">         snookerPlayers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      snookerPlayers.put(rank -&gt; rank == <span class="number">1</span>, () -&gt;</span><br><span class="line">         <span class="keyword">new</span> TennisPlayer(<span class="string">"Ronnie O'Sullivan"</span>));</span><br><span class="line">      snookerPlayers.put(rank -&gt; rank == <span class="number">2</span>, () -&gt;</span><br><span class="line">         <span class="keyword">new</span> TennisPlayer(<span class="string">"Mark Selby"</span>));</span><br><span class="line">      snookerPlayers.put(rank -&gt; rank &gt; <span class="number">3</span> &amp;&amp; rank &lt; <span class="number">7</span>, () -&gt;</span><br><span class="line">         <span class="keyword">new</span> TennisPlayer(<span class="string">"John Higgins"</span>));</span><br><span class="line">      snookerPlayers.put(rank -&gt; rank &gt;= <span class="number">7</span> &amp;&amp; rank &lt;= <span class="number">10</span>, () -&gt;</span><br><span class="line">         <span class="keyword">new</span> TennisPlayer(<span class="string">"Neil Robertson"</span>));</span><br><span class="line"></span><br><span class="line">      playerCreator.put(<span class="string">"TENNIS"</span>, tennisPlayers);</span><br><span class="line">      playerCreator.put(<span class="string">"FOOTBALL"</span>, footballPlayers);</span><br><span class="line">      playerCreator.put(<span class="string">"SNOOKER"</span>, snookerPlayers);</span><br><span class="line"></span><br><span class="line">      PLAYER_CREATOR = Collections.unmodifiableMap(playerCreator);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Player <span class="title">supplyPlayer</span><span class="params">(String playerType,</span></span></span><br><span class="line"><span class="function"><span class="params">         <span class="keyword">int</span> rank)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (rank &lt; <span class="number">1</span> || rank &gt; <span class="number">10</span>) &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid rank: "</span> +</span><br><span class="line">            rank);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!PLAYER_CREATOR.containsKey(playerType)) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid player type: "</span></span><br><span class="line">            + playerType);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Map&lt;Predicate&lt;Integer&gt;, Supplier&lt;Player&gt;&gt; players =</span><br><span class="line">         PLAYER_CREATOR.get(playerType);</span><br><span class="line">      <span class="keyword">for</span> (Entry&lt;Predicate&lt;Integer&gt;, Supplier&lt;Player&gt;&gt;</span><br><span class="line">            entry : players.entrySet()) &#123;</span><br><span class="line">         <span class="keyword">if</span> (entry.getKey().test(rank)) &#123;</span><br><span class="line">            <span class="keyword">return</span> entry.getValue().get();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The players map is</span></span><br><span class="line"><span class="string">         corrupted"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下的使用方式可以获取到 <code>Football player: Cristiano Ronaldo</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Player footballPlayer = PlayerSupplier.supplyPlayer(<span class="string">"FOOTBALL"</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure><p>其他方法可以使用枚举来构成，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> PlayerTypes &#123;</span><br><span class="line"></span><br><span class="line">   TENNIS(Collections.unmodifiableList(Arrays.asList(</span><br><span class="line">      () -&gt; <span class="keyword">new</span> TennisPlayer(<span class="string">"Rafael Nadal"</span>),</span><br><span class="line">      () -&gt; <span class="keyword">new</span> TennisPlayer(<span class="string">"Roger Federer"</span>),</span><br><span class="line">      () -&gt; <span class="keyword">new</span> TennisPlayer(<span class="string">"Andy Murray"</span>))</span><br><span class="line">   ),</span><br><span class="line">   Collections.unmodifiableList(Arrays.asList(</span><br><span class="line">      rank -&gt; rank == <span class="number">1</span>, rank -&gt; rank &gt; <span class="number">1</span> &amp;&amp;</span><br><span class="line">      rank &lt; <span class="number">5</span>, rank -&gt; rank &gt;= <span class="number">5</span> &amp;&amp; rank &lt;= <span class="number">10</span>))</span><br><span class="line">   ),</span><br><span class="line">   FOOTBALL(Collections.unmodifiableList(Arrays.asList(</span><br><span class="line">      () -&gt; <span class="keyword">new</span> FootballPlayer(<span class="string">"Lionel Messi"</span>),</span><br><span class="line">      () -&gt; <span class="keyword">new</span> FootballPlayer(<span class="string">"Cristiano Ronaldo"</span>))</span><br><span class="line">   ),</span><br><span class="line">   Collections.unmodifiableList(Arrays.asList(</span><br><span class="line">      rank -&gt; rank == <span class="number">1</span> || rank == <span class="number">2</span>,</span><br><span class="line">      rank -&gt; rank &gt; <span class="number">2</span> &amp;&amp; rank &lt;= <span class="number">10</span>))</span><br><span class="line">   ),</span><br><span class="line">   SNOOKER(Collections.unmodifiableList(Arrays.asList(</span><br><span class="line">      () -&gt; <span class="keyword">new</span> SnookerPlayer(<span class="string">"Ronnie O'Sullivan"</span>),</span><br><span class="line">      () -&gt; <span class="keyword">new</span> SnookerPlayer(<span class="string">"Mark Selby"</span>),</span><br><span class="line">      () -&gt; <span class="keyword">new</span> SnookerPlayer(<span class="string">"John Higgins"</span>),</span><br><span class="line">      () -&gt; <span class="keyword">new</span> SnookerPlayer(<span class="string">"Neil Robertson"</span>))</span><br><span class="line">   ),</span><br><span class="line">   Collections.unmodifiableList(Arrays.asList(</span><br><span class="line">      rank -&gt; rank == <span class="number">1</span>, rank -&gt; rank == <span class="number">2</span>,</span><br><span class="line">      rank -&gt; rank &gt; <span class="number">3</span> &amp;&amp; rank &lt; <span class="number">7</span>,</span><br><span class="line">      rank -&gt; rank &gt;= <span class="number">7</span> &amp;&amp; rank &lt;= <span class="number">10</span>))</span><br><span class="line">   );</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Supplier&lt;Player&gt;&gt; names;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Predicate&lt;Integer&gt;&gt; conditions;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">PlayerTypes</span><span class="params">(List&lt;Supplier&lt;Player&gt;&gt; names,</span></span></span><br><span class="line"><span class="function"><span class="params">         List&lt;Predicate&lt;Integer&gt;&gt; conditions)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.names = names;</span><br><span class="line">      <span class="keyword">this</span>.conditions = conditions;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Player <span class="title">supplyPlayer</span><span class="params">(String playerType,</span></span></span><br><span class="line"><span class="function"><span class="params">         <span class="keyword">int</span> rank)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (rank &lt; <span class="number">1</span> || rank &gt; <span class="number">10</span>) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid rank: "</span> +</span><br><span class="line">            rank);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      List&lt;Predicate&lt;Integer&gt;&gt; selectors =</span><br><span class="line">         PlayerTypes.valueOf(playerType).conditions;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; selectors.size(); i++) &#123;</span><br><span class="line">         <span class="keyword">if</span> (selectors.get(i).test(rank)) &#123;</span><br><span class="line">            <span class="keyword">return</span> PlayerTypes.valueOf(playerType)</span><br><span class="line">               .names.get(i).get();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The enum is corrupted"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到如下输出:<code>Snooker player: Neil Robertson</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Player snookerPlayer = PlayerTypes.supplyPlayer(<span class="string">"SNOOKER"</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这篇文章中，你看到了七种方法去解决switch结构，如下</p><ul><li>用枚举的形式实现策略模式</li><li>实现命令模式</li><li>使用Java8 之后的 Supplier</li><li>定义一个通用的函数式接口</li><li>使用抽象工厂</li><li>实现状态模式</li><li>通过Predicate</li></ul><h2 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h2><p>几种方式都离不开表驱动，如何构成这张表，第一个枚举形式是将枚举值本身构成了表</p><p>命令模式是将表项抽象了一个接口”命令“来放到Map中构成表</p><p>之后包括Java8的函数式接口等等只是表的填充方式不同</p><p>抽象工厂还是以Switch来实现的，这个表只不过被抽象层压在下面，抽象工厂接口提供了工厂的统一访问方式，而具体类去实现这个接口，由工厂类去实现管理</p><p>状态模式适用于状态之间关系相互依赖，相对复杂，将依赖项揪出来，将依赖项的状态独立出来，依赖项影响的方法作为接口交给具体类去实现</p><p>最后一个通过Predicate感觉略有鸡肋。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己翻译的，英语渣，其实看代码意思就都能理解，这里放上原网址&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://www.maoxin.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://www.maoxin.site/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>NIO-Selector</title>
    <link href="http://www.maoxin.site/2018/10/13/NIO-02/"/>
    <id>http://www.maoxin.site/2018/10/13/NIO-02/</id>
    <published>2018-10-13T11:50:28.000Z</published>
    <updated>2018-10-15T13:55:19.474Z</updated>
    
    <content type="html"><![CDATA[<p>此博客是对知乎海纳文章的理解与总结</p><h2 id="引入多路复用的原因"><a href="#引入多路复用的原因" class="headerlink" title="引入多路复用的原因"></a>引入多路复用的原因</h2><ol><li>服务器与客户端通信时，原来的场景需要大量的服务线程，连接时间很短，数据量发送很小，大量的服务线程使得竞争加剧，大量的开销会严重影响OS的效率</li><li>IO多路复用，可以解决线程切换的问题，可以同在很少的线程中管理多路IO</li><li>不是说IO多路复用效率一定高，要看具体场景，如果是两个对等机器之间建立了TCP连接，并且通过TCP连接来发送一个大文件，有大量的数据传输。在这种场景中，阻塞式的写法简单高效。</li><li>另外加深理解，需要明白一台服务器能创建的线程数是十分有限的，在Java中创建线程，一个线程默认就会预留1M的空间，那么1G的内存也不过只能支持1000个线程创建而已。<h2 id="Linux中的Poll"><a href="#Linux中的Poll" class="headerlink" title="Linux中的Poll"></a>Linux中的Poll</h2><h3 id="什么是poll"><a href="#什么是poll" class="headerlink" title="什么是poll?"></a>什么是poll?</h3>poll系统调用让操作系统管理多个链接，监视其发生的事件，并</li></ol><blockquote><p>参考资料: <a href="https://zhuanlan.zhihu.com/p/27419141" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/27419141</a> 海纳<br>问题与实现: select poll epoll <a href="https://blog.csdn.net/davidsguo008/article/details/73556811" target="_blank" rel="noopener">https://blog.csdn.net/davidsguo008/article/details/73556811</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此博客是对知乎海纳文章的理解与总结&lt;/p&gt;
&lt;h2 id=&quot;引入多路复用的原因&quot;&gt;&lt;a href=&quot;#引入多路复用的原因&quot; class=&quot;headerlink&quot; title=&quot;引入多路复用的原因&quot;&gt;&lt;/a&gt;引入多路复用的原因&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;服务器与客户端通信时，
      
    
    </summary>
    
      <category term="Java" scheme="http://www.maoxin.site/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.maoxin.site/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>NIO-Buffer</title>
    <link href="http://www.maoxin.site/2018/10/13/NIO-01/"/>
    <id>http://www.maoxin.site/2018/10/13/NIO-01/</id>
    <published>2018-10-13T11:44:38.000Z</published>
    <updated>2018-11-04T08:57:09.766Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h2><p>Buffer实现了一个缓存区读写区域，通过四个”指针”的灵活运用，完成在缓冲区内部的读写变换<br><a id="more"></a><br>这四个指针分别是:</p><ol><li>Capacity 容量，在创建时就定下的，代指缓冲区容量</li><li>Limit 限制，指的是在读写两个操作中缓存区能操作的上界</li><li>Position 代指下一个要读写元素的位置</li><li>mark 一个标记，用于恢复到上一次读写位置<br>从上面的描述很容易看出，Limit与position是有两个不同的语义的，在不同操作的情况下，其指向的位置必须做出改变：</li></ol><ul><li>在写操作时，position指向的是下一个要写的位置，limit与capacity相等，表示能写的极限</li><li>在读操作时，position会置为0,limit表示最多能读到的位置<h2 id="Buffer的操作"><a href="#Buffer的操作" class="headerlink" title="Buffer的操作"></a>Buffer的操作</h2><h3 id="存取数据"><a href="#存取数据" class="headerlink" title="存取数据"></a>存取数据</h3><h4 id="put"><a href="#put" class="headerlink" title="put"></a>put</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hb是字节数组的实体，ix函数用于计算偏移</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">put</span><span class="params">(<span class="keyword">byte</span> x)</span> </span>&#123;</span><br><span class="line">    hb[ix(nextPutIndex())] = x;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回下标</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">nextPutIndex</span><span class="params">()</span> </span>&#123;                          <span class="comment">// package-private</span></span><br><span class="line">    <span class="keyword">if</span> (position &gt;= limit)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BufferOverflowException();</span><br><span class="line">    <span class="keyword">return</span> position++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">byte</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hb[ix(nextGetIndex())];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">nextGetIndex</span><span class="params">()</span> </span>&#123;                          <span class="comment">// package-private</span></span><br><span class="line">    <span class="keyword">if</span> (position &gt;= limit)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BufferUnderflowException();</span><br><span class="line">    <span class="keyword">return</span> position++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调整指针位置的方法"><a href="#调整指针位置的方法" class="headerlink" title="调整指针位置的方法"></a>调整指针位置的方法</h3><h4 id="position"><a href="#position" class="headerlink" title="position"></a>position</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">position</span><span class="params">(<span class="keyword">int</span> newPosition)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//检查参数正确性</span></span><br><span class="line">    <span class="keyword">if</span> ((newPosition &gt; limit) || (newPosition &lt; <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="comment">//设定新参数</span></span><br><span class="line">    position = newPosition;</span><br><span class="line">    <span class="comment">//如果标记在修改的位置之后则重置标记</span></span><br><span class="line">    <span class="keyword">if</span> (mark &gt; position) mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同理</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">limit</span><span class="params">(<span class="keyword">int</span> newLimit)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((newLimit &gt; capacity) || (newLimit &lt; <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    limit = newLimit;</span><br><span class="line">    <span class="keyword">if</span> (position &gt; limit) position = limit;</span><br><span class="line">    <span class="keyword">if</span> (mark &gt; limit) mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="filp-读写转换"><a href="#filp-读写转换" class="headerlink" title="filp 读写转换"></a>filp 读写转换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">flip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    limit = position;</span><br><span class="line">    position = <span class="number">0</span>;</span><br><span class="line">    mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，连续调用flip就会使得buffer的limit变成0，既不能读也不能写</p><h4 id="mark与reset"><a href="#mark与reset" class="headerlink" title="mark与reset"></a>mark与reset</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">mark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mark = position;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = mark;</span><br><span class="line">    <span class="keyword">if</span> (m &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidMarkException();</span><br><span class="line">    position = m;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他功能实现"><a href="#其他功能实现" class="headerlink" title="其他功能实现"></a>其他功能实现</h3><p>方法在Buffer抽象类中</p><h4 id="clear-恢复到写模式，重新写"><a href="#clear-恢复到写模式，重新写" class="headerlink" title="clear 恢复到写模式，重新写"></a>clear 恢复到写模式，重新写</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    position = <span class="number">0</span>;</span><br><span class="line">    limit = capacity;</span><br><span class="line">    mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rewind-重绕-不修改limit的值"><a href="#rewind-重绕-不修改limit的值" class="headerlink" title="rewind 重绕-不修改limit的值"></a>rewind 重绕-不修改limit的值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">rewind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    position = <span class="number">0</span>;</span><br><span class="line">    mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="remaining"><a href="#remaining" class="headerlink" title="remaining"></a>remaining</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//得到缓冲区剩下的字节数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">remaining</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> limit - position;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="isRemaining"><a href="#isRemaining" class="headerlink" title="isRemaining"></a>isRemaining</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasRemaining</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> position &lt; limit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆外内存"><a href="#堆外内存" class="headerlink" title="堆外内存"></a>堆外内存</h2><p>简而言之，分配一块Java不老动的内存区域，当在保存大量的数据我们只是用于IO操作或者说暂时不去处理的时候，GC操作的到来将这么大一块区域搬来搬去，是很耗时而没有意义的，当然，解决的方式就是分配一块堆外内存，这块区域JVM对其进行引用计数，如果没有引用了才进行回收</p><h2 id="Zero-Copy-0拷贝"><a href="#Zero-Copy-0拷贝" class="headerlink" title="Zero-Copy 0拷贝"></a>Zero-Copy 0拷贝</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Buffer&quot;&gt;&lt;a href=&quot;#Buffer&quot; class=&quot;headerlink&quot; title=&quot;Buffer&quot;&gt;&lt;/a&gt;Buffer&lt;/h2&gt;&lt;p&gt;Buffer实现了一个缓存区读写区域，通过四个”指针”的灵活运用，完成在缓冲区内部的读写变换&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.maoxin.site/categories/Java/"/>
    
    
      <category term="NIO" scheme="http://www.maoxin.site/tags/NIO/"/>
    
  </entry>
  
  <entry>
    <title>ES6异步编程</title>
    <link href="http://www.maoxin.site/2018/10/06/js-08/"/>
    <id>http://www.maoxin.site/2018/10/06/js-08/</id>
    <published>2018-10-06T03:18:57.000Z</published>
    <updated>2018-10-06T06:39:34.474Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.maoxin.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.maoxin.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>ucore Lab1</title>
    <link href="http://www.maoxin.site/2018/10/03/ucore-Lab1/"/>
    <id>http://www.maoxin.site/2018/10/03/ucore-Lab1/</id>
    <published>2018-10-03T14:46:42.000Z</published>
    <updated>2018-11-01T09:33:51.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作系统实验报告"><a href="#操作系统实验报告" class="headerlink" title="操作系统实验报告"></a>操作系统实验报告</h1><a id="more"></a><h2 id="实验1-bootloader的启动"><a href="#实验1-bootloader的启动" class="headerlink" title="实验1: bootloader的启动"></a>实验1: bootloader的启动</h2><h3 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h3><p>要求：</p><ol><li>操作系统镜像文件ucore.img是如何一步一步生成的？(需要比较详细地解释Makefile中每一条相关命令和命令参数的含义，以及说明命令导致的结果)</li><li>一个被认为是符合规范的硬盘主引导扇区的特征是什么？<br>实验过程:</li><li><p>在构建过程中使用<code>make V=</code>来查看具体执行过程，具体执行过程如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下均为将各个文件编译为目标文件</span></span><br><span class="line">+ cc kern/init/init.c  //编译 init.c</span><br><span class="line">+ kern/libs/readline.c //编译 readline.c</span><br><span class="line">+ cc kern/libs/stdio.c //编译 stdio.c</span><br><span class="line">+ cc kern/debug/kdebug.c//编译 kdebug.c </span><br><span class="line">+ cc kern/debug/kmonitor.c //编译 kmonitor</span><br><span class="line">+ cc kern/debug/panic.c//编译 panic.c</span><br><span class="line">+ cc kern/driver/clock.c //编译 clock.c</span><br><span class="line">+ cc kern/driver/console.c //编译 console.c</span><br><span class="line">+ cc kern/driver/intr.c//编译 intr.c</span><br><span class="line">+ cc kern/driver/picirq.c //编译 picirq.c</span><br><span class="line">+ cc kern/<span class="built_in">trap</span>/trap.c //编译 trap.c</span><br><span class="line">+ cc kern/<span class="built_in">trap</span>/trapentry.S //编译 trapentry.S</span><br><span class="line">+ cc kern/<span class="built_in">trap</span>/vectors.S //编译 vector.S</span><br><span class="line">+ cc kern/mm/pmm.c//编译 pmm.c</span><br><span class="line">+ cc libs/printfmt.c // printgmt.c</span><br><span class="line">+ cc libs/string.c //编译 string.c</span><br><span class="line">+ ld bin/kernel//接下来用ld合并目标文件(object) 和 库文件(archive),生成kernel程序</span><br><span class="line">+ cc boot/bootasm.S //编译 bootasm.S</span><br><span class="line">+ cc boot/bootmain.c //编译 bootmain.c</span><br><span class="line">+ cc tools/sign.c //编译 sign.c</span><br><span class="line"><span class="comment"># 以上执行过程均附加了gcc参数如下,以第一行init.c为例</span></span><br><span class="line">gcc -Ikern/init/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/<span class="built_in">trap</span>/ -Ikern/mm/ -c kern/init/init.c -o obj/kern/init/init.o</span><br><span class="line"><span class="comment"># gcc -I 指明包含路径名称 -fno-builtin表明不使用内建函数 -Wall开启所有警告  -ggdb生成GDB调试信息 -gstabs此选项以stabs格式声称调试信息,但是不包括gdb调试信息，-m32生成32位机器的汇编代码 -nostdincgcc编译的时候不要在标准系统目录中找头文件 -fnostack-protector 不启用溢出检测机制 </span></span><br><span class="line">+ ld bin/bootblock //链接生成block文件</span><br><span class="line">//最后将bootloader放入虚拟硬盘ucore.img中去。</span><br><span class="line">dd <span class="keyword">if</span>=/dev/zero of=bin/ucore.img count=10000</span><br><span class="line">dd <span class="keyword">if</span>=bin/bootblock of=bin/ucore.img conv=notrunc</span><br><span class="line">dd <span class="keyword">if</span>=bin/kernel of=bin/ucore.img seek=1 conv=notrunc</span><br><span class="line"><span class="comment"># 这里用到了dd命令，if是输入of是输出count是块大小，关于conv参数可以参考 https://www.cnblogs.com/dkblog/archive/2009/09/18/1980715.html  https://blog.csdn.net/u011616400/article/details/41575745 ,其作用睡觉哦不截断输出文件</span></span><br></pre></td></tr></table></figure></li><li><p>一个被系统认为是符合规范的硬盘主引导扇区的特征是什么？</p></li></ol><p>查看tools/sign.c文件如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line">    <span class="comment">//检查输入参数</span></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Usage: &lt;input filename&gt; &lt;output filename&gt;\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//stat函数传入文件名和结构体对象可以返回一个结构体信息，检测是否是吧</span></span><br><span class="line">    <span class="keyword">if</span> (stat(argv[<span class="number">1</span>], &amp;st) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error opening file '%s': %s\n"</span>, argv[<span class="number">1</span>], strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出长度</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"'%s' size: %lld bytes\n"</span>, argv[<span class="number">1</span>], (<span class="keyword">long</span> <span class="keyword">long</span>)st.st_size);</span><br><span class="line">    <span class="comment">//检测是否超过510个字节</span></span><br><span class="line">    <span class="keyword">if</span> (st.st_size &gt; <span class="number">510</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%lld &gt;&gt; 510!!\n"</span>, (<span class="keyword">long</span> <span class="keyword">long</span>)st.st_size);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//建立缓冲区，将缓冲区置0</span></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">512</span>];</span><br><span class="line">    <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="comment">//读取文件，填充缓冲区</span></span><br><span class="line">    FILE *ifp = fopen(argv[<span class="number">1</span>], <span class="string">"rb"</span>);</span><br><span class="line">    <span class="keyword">int</span> size = fread(buf, <span class="number">1</span>, st.st_size, ifp);</span><br><span class="line">    <span class="comment">//判断文件大小是否如文件信息所述</span></span><br><span class="line">    <span class="keyword">if</span> (size != st.st_size) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"read '%s' error, size is %d.\n"</span>, argv[<span class="number">1</span>], size);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭流</span></span><br><span class="line">    fclose(ifp);</span><br><span class="line">    <span class="comment">//写入标识</span></span><br><span class="line">    buf[<span class="number">510</span>] = <span class="number">0x55</span>;</span><br><span class="line">    buf[<span class="number">511</span>] = <span class="number">0xAA</span>;</span><br><span class="line">    <span class="comment">//打开新文件，写出</span></span><br><span class="line">    FILE *ofp = fopen(argv[<span class="number">2</span>], <span class="string">"wb+"</span>);</span><br><span class="line">    size = fwrite(buf, <span class="number">1</span>, <span class="number">512</span>, ofp);</span><br><span class="line">    <span class="comment">//再次检测大小是否符合要求</span></span><br><span class="line">    <span class="keyword">if</span> (size != <span class="number">512</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"write '%s' error, size is %d.\n"</span>, argv[<span class="number">2</span>], size);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(ofp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"build 512 bytes boot sector: '%s' success!\n"</span>, argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h3><p>要求：<br>使用qemu执行并调试lab1中的软件。（要求在报告中简要写出练习过程）</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">V=@</span><br><span class="line">BINDIR=bin</span><br><span class="line"><span class="section">lab1-mon: <span class="variable">$(UCOREIMG)</span></span></span><br><span class="line"><span class="variable">$(V)</span><span class="variable">$(TERMINAL)</span> -e <span class="string">"<span class="variable">$(QEMU)</span> -S -s -d in_asm -D <span class="variable">$(BINDIR)</span>/q.log -monitor stdio -hda <span class="variable">$&lt;</span> -serial null"</span></span><br><span class="line"><span class="variable">$(V)</span>sleep 2</span><br><span class="line"><span class="variable">$(V)</span><span class="variable">$(TERMINAL)</span> -e <span class="string">"gdb -q -x tools/lab1init"</span></span><br></pre></td></tr></table></figure><p>第一行参数表</p><ul><li>-S 在启动时不启动 CPU， 需要在 monitor 中输入 ‘c’，才能让qemu继续模拟工作</li><li>-s 等待gdb连接到端口1234</li><li>-d 输出日志到 qemu</li><li>-hda 指明使用file作为硬盘0镜像</li><li>-serial dev 重定向虚拟串口到主机设备dev中</li></ul><p>第三行参数表</p><ul><li>-x 指明预设命令文件,预设文件如下<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file bin/kernel #加载符号信息 </span><br><span class="line">target remote :1234 #与qemu进行链接</span><br><span class="line">set architecture i8086 #设置处理器架构</span><br><span class="line">b *0x7c00 #在0x7c00设置断点</span><br><span class="line">continue #继续</span><br><span class="line">x /2i $pc #显示PC之后的两条指令</span><br></pre></td></tr></table></figure></li></ul><p>使用GDB命令完成以下工作:</p><ol><li>查看PC之后的10行命令<code>x/10i $pc</code></li><li>查看具体位置的内存数据<code>x/</code></li><li>查看GDTR寄存器的值</li><li>断点<code>b *0x7c0a</code></li><li>打印所有寄存器<code>info register</code>，也可以是<code>i r</code></li><li>在开启保护模式后设置架构<code>set architecture i386</code></li><li>单步源代码的下一行，不进入函数<code>next</code></li><li>单步一条机器指令，不进入函数<code>nexti</code></li><li>单步到下一个不同的源代码行,进入函数<code>step</code></li><li>单步到一条机器指令，进入函数<code>stepi</code><h4 id="从CPU加电执行的第一条指令开始，单步跟踪BIOS的执行"><a href="#从CPU加电执行的第一条指令开始，单步跟踪BIOS的执行" class="headerlink" title="从CPU加电执行的第一条指令开始，单步跟踪BIOS的执行"></a>从CPU加电执行的第一条指令开始，单步跟踪BIOS的执行</h4>由于开机时处于实模式，开机的时候CS:IP=0xf000:fff0因此应该查看这里的指令</li></ol><p><img src="1.png" alt="输出"></p><p>之后执行一系列BIOS操作最够将控制权转交给0x7c00的bootloader部分</p><h3 id="练习3-分析bootloader进入保护模式的过程"><a href="#练习3-分析bootloader进入保护模式的过程" class="headerlink" title="练习3 分析bootloader进入保护模式的过程"></a>练习3 分析bootloader进入保护模式的过程</h3><h4 id="步骤-关键步骤前加"><a href="#步骤-关键步骤前加" class="headerlink" title="步骤(关键步骤前加*)"></a>步骤(关键步骤前加*)</h4><ol start="0"><li>准备基本的GDT表项以供使用进入保护模式之后使用</li><li>初始化寄存器</li><li>*检测并发送A20开启信号来开启A20</li><li>*通过修改CR0寄存器的保护模式使能位进入保护模式</li><li>*用保护模式的寻址机制跳转到初始化保护寄存器的代码段(protcseg)长跳转指令进入</li><li>*初始化堆栈部分一便于C语言程序的调用堆栈区域是从0–start(0x7c00)<h4 id="代码阅读"><a href="#代码阅读" class="headerlink" title="代码阅读"></a>代码阅读</h4><a href="https://github.com/PickDream/OSPratice/blob/master/uCore/sourcecode/boot/bootasm.S" target="_blank" rel="noopener">代码注释</a><h3 id="练习4：分析bootloader加载ELF格式的OS的过程。"><a href="#练习4：分析bootloader加载ELF格式的OS的过程。" class="headerlink" title="练习4：分析bootloader加载ELF格式的OS的过程。"></a>练习4：分析bootloader加载ELF格式的OS的过程。</h3>bootloader在前面可以看到，分为两部分，一部分是汇编代码写的，主要完成进入保护模式并初始化寄存器，第二部分是C代码写的，主要完成加载ELF格式的内核文件到内存中，这里就涉及到原生的C并不能完成的任务，例如读取硬盘扇区，在这里使用的是GCC内联汇编来完成基本功能被C代码使用的。<h4 id="读取硬盘部分"><a href="#读取硬盘部分" class="headerlink" title="读取硬盘部分"></a>读取硬盘部分</h4>读取扇区(readsect)的操作可以分为如下几部分</li><li>等待磁盘准备好       (<code>whitdisk(void)</code>)</li><li>发出读取磁盘的命令   (向硬盘的IO端口输出读取信息)</li><li>等待磁盘准备好       (<code>whitdisk(void)</code>)</li><li>将磁盘扇区的数据读到指定的内存中去<blockquote><p>0号磁盘的IO端口详细信息:<br>1F0H 0号硬盘数据寄存器<br>1F1H 0号硬盘错误寄存器(读时),0号硬盘Features寄存器(写时)<br>1F2H 0号硬盘数据扇区计数<br>1F3H 0号硬盘扇区数<br>1F4H 0号硬盘柱面(低字节)<br>1F5H 0号硬盘柱面(高字节)<br>1F6H 0号磁盘驱动器/磁头寄存器<br>1F7H 0号硬盘状态寄存器(读时)，0号硬盘命令寄存器(写时)</p></blockquote></li></ol><p><a href="https://github.com/PickDream/OSPratice/blob/master/uCore/sourcecode/boot/bootmain.c" target="_blank" rel="noopener">读取硬盘的详细阅读代码注释</a></p><h4 id="装载ELF格式内核"><a href="#装载ELF格式内核" class="headerlink" title="装载ELF格式内核"></a>装载ELF格式内核</h4><p><img src="Elf-layout.svg" alt="ELF布局"><br>在这里需要简单的了解ELF文件布局如下</p><p><img src="ELF.png" alt="ELF部分功能"></p><p>使用<code>objdump -h</code>查看ELF文件信息，可以查看在相关节的信息<br><img src="objdump.png" alt="objdumo查看信息"></p><ul><li>链接地址(Virtual Memory Address)和加载地址(Load Memory Address):程序在链接的时候会确定链接地址，这个地址是逻辑上的，代码中绝对的跳转都按照此基准进行，而加载地址是事实加载的地址。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* bootmain - bootloader的入口 */</span></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">bootmain(<span class="keyword">void</span>) &#123;</span><br><span class="line">    <span class="comment">// 将文件的前4KB读取内存</span></span><br><span class="line">    readseg((<span class="keyword">uintptr_t</span>)ELFHDR, SECTSIZE * <span class="number">8</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测加载进内存的内核模块是否是ELF文件</span></span><br><span class="line">    <span class="keyword">if</span> (ELFHDR-&gt;e_magic != ELF_MAGIC) &#123;  </span><br><span class="line">        <span class="keyword">goto</span> bad;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">proghdr</span> *<span class="title">ph</span>, *<span class="title">eph</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过结构体的偏移找到程序头表的入口，并加载程序段(ignores ph flags)</span></span><br><span class="line">    ph = (struct proghdr *)((<span class="keyword">uintptr_t</span>)ELFHDR + ELFHDR-&gt;e_phoff);</span><br><span class="line">    <span class="comment">// 通过指针的偏移,找到程序头表结束的地址</span></span><br><span class="line">    eph = ph + ELFHDR-&gt;e_phnum;</span><br><span class="line">    <span class="comment">//开始对程序头表包含的具体的信息进行遍历处理</span></span><br><span class="line">    <span class="keyword">for</span> (; ph &lt; eph; ph ++) &#123;</span><br><span class="line">        <span class="comment">//用readreg这个函数将文件的每一个段都读到内存中由程序头表的相应位置</span></span><br><span class="line">        <span class="comment">//由于kernel 程序的链接地址太高，而实际内存没有那么大的情况下，实际地址就是&amp;0xFFFFFF的结果(Mark，这个还不是太懂)</span></span><br><span class="line">        readseg(ph-&gt;p_va &amp; <span class="number">0xFFFFFF</span>, ph-&gt;p_memsz, ph-&gt;p_offset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用elf文件格式指明的程序入口点地址，转交控制权</span></span><br><span class="line">    <span class="comment">// note: 不会返回</span></span><br><span class="line">    ((<span class="keyword">void</span> (*)(<span class="keyword">void</span>))(ELFHDR-&gt;e_entry &amp; <span class="number">0xFFFFFF</span>))();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*加载失败跳转到这里*/</span></span><br><span class="line">bad:</span><br><span class="line">    outw(<span class="number">0x8A00</span>, <span class="number">0x8A00</span>);</span><br><span class="line">    outw(<span class="number">0x8A00</span>, <span class="number">0x8E00</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 无限循环 */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="实现函数调用堆栈跟踪函数-（需要编程）"><a href="#实现函数调用堆栈跟踪函数-（需要编程）" class="headerlink" title="实现函数调用堆栈跟踪函数 （需要编程）"></a>实现函数调用堆栈跟踪函数 （需要编程）</h4><p>一个函数调用的大致步骤分为以下阶段，由于调用约定多样，这里只总结大致步骤</p><ol><li>参数的传入，可以push参数，也可以传入具体的寄存器</li><li><code>call</code> 将返回地址压入堆栈中，ESP-4(32位)，此时ESP指向的是保存返回值的地址</li><li><code>push %ebp</code> 将上一个堆栈的栈底指针传入，ESP再次-4</li><li><code>mov %esp,%ebp</code> 设置新的栈底</li><li>提升栈空间，用于函数操作</li><li>保护现场，具体是保存将要修改的寄存器</li><li>其他初始化工作</li><li>执行函数核心内容</li><li>恢复现场</li><li><code>pop %ebp</code> 恢复堆栈</li><li><code>ret</code><br>依据上述过程易得：</li></ol><ul><li>如果函数传入参数是通过在call之前压入参数来做到了，那么其参数地址是ebp+8+4*(n+1),n=1,2,3…</li><li>函数的返回地址是ebp+4</li><li>ebp指示的位置是上一个函数调用esp的位置，ebp内保存的内容是原来ebp的值</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;操作系统实验报告&quot;&gt;&lt;a href=&quot;#操作系统实验报告&quot; class=&quot;headerlink&quot; title=&quot;操作系统实验报告&quot;&gt;&lt;/a&gt;操作系统实验报告&lt;/h1&gt;
    
    </summary>
    
      <category term="操作系统" scheme="http://www.maoxin.site/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://www.maoxin.site/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript 6</title>
    <link href="http://www.maoxin.site/2018/09/27/js-07/"/>
    <id>http://www.maoxin.site/2018/09/27/js-07/</id>
    <published>2018-09-27T08:18:56.000Z</published>
    <updated>2018-11-01T09:32:32.358Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="历史与概念"><a href="#历史与概念" class="headerlink" title="历史与概念"></a>历史与概念</h2><h3 id="Evergreen-Browsers"><a href="#Evergreen-Browsers" class="headerlink" title="Evergreen Browsers"></a>Evergreen Browsers</h3><p>长期浏览器，支持最新标准</p><ul><li>Microsoft Edge</li><li>Firefox</li><li>Chrome</li><li>Opera</li><li>Safari<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3></li><li>node  </li><li>npm js的包管理工具</li><li>babel 针对ES标准的转译器，将新版本的语法转换为老版本<h3 id="shim-amp-polyfill"><a href="#shim-amp-polyfill" class="headerlink" title="shim&amp;polyfill"></a>shim&amp;polyfill</h3></li><li>提供API来在旧的基础之上支持类似的新标准的功能</li><li>polyfill 更贴近标准，扩展原生对象来提供几乎一样的新标准支持<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="let-与-const"><a href="#let-与-const" class="headerlink" title="let 与 const"></a>let 与 const</h3></li></ul><ol><li>let和const不可以重复声明</li><li><p>let和const都在块级作用域有效</p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;<span class="keyword">return</span> a*<span class="number">2</span>&#125;)</span><br><span class="line"></span><br><span class="line">(a)=&gt;&#123;<span class="keyword">return</span> a*<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">(a)=&gt;a*<span class="number">2</span></span><br><span class="line"></span><br><span class="line">a =&gt; a*<span class="number">2</span></span><br><span class="line"><span class="comment">//返回值</span></span><br><span class="line"><span class="comment">//返回对象，注意｛｝的语义可能冲突</span></span><br><span class="line"><span class="keyword">const</span> funObj = <span class="function"><span class="params">name</span> =&gt;</span>&#123;&#123;name,<span class="attr">age</span>:<span class="number">27</span>&#125;&#125;</span><br><span class="line"><span class="comment">//不能作为构造函数</span></span><br><span class="line"><span class="keyword">const</span> A =<span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;</span><br><span class="line"><span class="keyword">new</span> A()</span><br><span class="line"><span class="comment">//this指向问题</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    a:<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.info(<span class="keyword">this</span>.c);</span><br><span class="line">    &#125;,</span><br><span class="line">    b:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.info(<span class="keyword">this</span>.c)</span><br><span class="line">    &#125;</span><br><span class="line">    c:<span class="number">123</span></span><br><span class="line">&#125;;</span><br><span class="line">obj.a();<span class="comment">//undefined</span></span><br><span class="line">obj.b();<span class="comment">//123</span></span><br></pre></td></tr></table></figure></li><li><p>箭头函数只能替换函数表达式，不能替换函数声明，因为它是匿名的</p></li><li>不能赋值常量作为构造函数</li><li>this指向是在定义时决定的而不是之前普通函数调用时定义的，this取决于父执行上下文的this<h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//module A</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">moduleMethod</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//module</span></span><br><span class="line"><span class="keyword">import</span> method form <span class="string">'./moduleA'</span></span><br><span class="line">method();</span><br></pre></td></tr></table></figure><p>引入多个函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//module A</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">methodA</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">methodB</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//module B</span></span><br><span class="line"><span class="keyword">import</span> &#123;methodA,methodB&#125; <span class="keyword">from</span> <span class="string">'./moduleA'</span></span><br><span class="line">methodA()</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> util <span class="keyword">from</span> <span class="string">"./moduleA"</span></span><br><span class="line">util.methodA()</span><br></pre></td></tr></table></figure></p><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><p>ES5中的方法推荐挂载到原型中，在ES6可以直接申明<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Teacher</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> options = options ||&#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.name = options.name ||<span class="string">'stefan'</span></span><br><span class="line">&#125;</span><br><span class="line">Teacher.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher1</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">"stefan"</span></span><br><span class="line">    &#125;</span><br><span class="line">    getName()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> teacher1 = <span class="keyword">new</span> Teacher1();</span><br></pre></td></tr></table></figure></p><p>深入理解类<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.info(<span class="keyword">typeof</span> Teacher1)<span class="comment">//function</span></span><br><span class="line"><span class="built_in">console</span>.info(Teacher1.prototype.constructor==Teacher1)<span class="comment">//true</span></span><br><span class="line"><span class="built_in">Object</span>.assign(Teacher1.prototype,&#123;</span><br><span class="line">    getName()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//区别</span></span><br><span class="line"><span class="built_in">console</span>.info(<span class="built_in">Object</span>.keys(Teacher.prototype));<span class="comment">//['getName']</span></span><br><span class="line"><span class="built_in">console</span>.info(<span class="built_in">Object</span>.keys(Teacher1.prototype))<span class="comment">//[]</span></span><br><span class="line"><span class="comment">//说明ES6是不可枚举的</span></span><br></pre></td></tr></table></figure></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>extends关键字<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PangTeacher</span> <span class="keyword">extends</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(...args)&#123;</span><br><span class="line">        <span class="comment">//子类没有自己的this对象，通过继承父类的this对象进行扩充的</span></span><br><span class="line">        <span class="keyword">super</span>(...args);</span><br><span class="line">        <span class="keyword">this</span>.weight = <span class="number">180</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> PangTeacher();</span><br></pre></td></tr></table></figure></p><h2 id="ES6高级特性"><a href="#ES6高级特性" class="headerlink" title="ES6高级特性"></a>ES6高级特性</h2><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>解构赋值(Destructuring Assignment)，学习Python<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.info(a,b,c);<span class="comment">//1 2 3</span></span><br><span class="line"><span class="keyword">var</span>[a,,b]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.info(a,b)<span class="comment">//1 3</span></span><br><span class="line"><span class="comment">//-------------------------</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> &#123;a,b&#125;= o;</span><br><span class="line"><span class="built_in">console</span>.info(a,b);<span class="comment">//1.2</span></span><br><span class="line"><span class="comment">//-------------------------</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> &#123;b,a&#125;=o;</span><br><span class="line"><span class="built_in">console</span>.info(a,b);<span class="comment">//1,2</span></span><br><span class="line"><span class="comment">//-------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">&#123;a,b,c&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.info(test(&#123;<span class="attr">a</span>:<span class="number">3</span>,<span class="attr">b</span>:<span class="number">4</span>,<span class="attr">c</span>:<span class="number">1</span>&#125;))</span><br></pre></td></tr></table></figure></p><p>解构赋值很方便的将声明和传参结合在了一起</p><h3 id="…"><a href="#…" class="headerlink" title="…"></a>…</h3><ul><li>Spread Elements &amp; Properties<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> spread = [<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> n = [x,y,...spread];</span><br><span class="line"><span class="built_in">console</span>.log(n)<span class="comment">//[1,2,3,4]</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y =<span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> spread = &#123;<span class="attr">a</span>:<span class="number">3</span>,<span class="attr">b</span>:<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> n = &#123;x,y,...spread&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(n);<span class="comment">//&#123;x:1,y:2,a:3,b:4&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spreadFunc</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.info(a+b+c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> args = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">spreadFunc(...args)</span><br></pre></td></tr></table></figure><ul><li>Rest Element &amp; Properties<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,...rest] = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="built_in">console</span>.log(b)</span><br><span class="line"><span class="built_in">console</span>.log(rest)<span class="comment">//[30,40,50]</span></span><br><span class="line"><span class="comment">//-----------------</span></span><br><span class="line"><span class="keyword">let</span>&#123;x,y,..rest&#125; = &#123;<span class="attr">x</span>:<span class="number">1</span>,<span class="attr">y</span>:<span class="number">2</span>,<span class="attr">a</span>:<span class="number">3</span>,<span class="attr">b</span>:<span class="number">4</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="built_in">console</span>.log(y);</span><br><span class="line"><span class="built_in">console</span>.log(rest);<span class="comment">//&#123;a:3,b:4&#125;</span></span><br><span class="line"><span class="comment">//------------------</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">restFunc</span>(<span class="params">a,...args</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h3><p>针对字符串拼接<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'stefan'</span></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'My name is'</span>+ name+<span class="string">'.'</span>);</span><br><span class="line"><span class="comment">//这里第一个\是转义，最后一个\是换行链接字符串</span></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'My name is'</span>+ name+<span class="string">'.\n\</span></span><br><span class="line"><span class="string">I love this world'</span>)</span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">`My name is <span class="subst">$&#123;name&#125;</span>.`</span>);</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">`My name is <span class="subst">$&#123;name&#125;</span>。</span></span><br><span class="line"><span class="string">I love this world.`</span>);</span><br></pre></td></tr></table></figure></p><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.info(<span class="built_in">Symbol</span>(<span class="string">'a'</span>)==<span class="built_in">Symbol</span>(<span class="string">'a'</span>))<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="Map-amp-Set"><a href="#Map-amp-Set" class="headerlink" title="Map&amp;Set"></a>Map&amp;Set</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="built_in">console</span>.info([...set])<span class="comment">//[1,2,3,4]</span></span><br><span class="line">set.add(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">console</span>.info([...set])<span class="comment">//[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="string">'a'</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="string">'b'</span>,<span class="number">2</span>]</span><br><span class="line">])</span><br><span class="line"><span class="built_in">console</span>.info(a.get(<span class="string">'a'</span>),a.get(<span class="string">'b'</span>));</span><br><span class="line">a.set(<span class="string">'c'</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="Generator-amp-Iterator"><a href="#Generator-amp-Iterator" class="headerlink" title="Generator &amp; Iterator"></a>Generator &amp; Iterator</h3><p>Generator 函数是一个状态机，封装了多个内部状态<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用function* 标明是一个Generator</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fibonacci</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> v1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> v2 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="comment">//进行求斐波那契数列的迭代</span></span><br><span class="line">        [v1,v2] = [v2,v1+v2];</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">let</span> reset = <span class="keyword">yield</span> v1;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">if</span>(reset)&#123;</span><br><span class="line">            v1 = <span class="number">0</span>;</span><br><span class="line">            v2 = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用迭代器函数，返回一个对象，带有next方法</span></span><br><span class="line"><span class="keyword">let</span> a = fibonacci();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a)</span><br><span class="line"><span class="comment">//调用对象的next方法返回一个对象带有value属性和done属性,next语义会生成下一个值</span></span><br><span class="line"><span class="comment">//value属性代表的是每次执行到yield的状态值</span></span><br><span class="line"><span class="comment">//down属性代表的是迭代是否结束</span></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'1'</span>,a.next());</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'1111'</span>,a.next());</span><br><span class="line"><span class="comment">//如果不取值，就不会生产值</span></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'2'</span>,a.next().value);</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'3'</span>,a.next().value);</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'4'</span>,a.next().value);</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'5'</span>,a.next().value);</span><br><span class="line"><span class="comment">//next传入的值会返回到yield 执行之后的返回值</span></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'6'</span>,a.next(<span class="literal">true</span>).value);</span><br></pre></td></tr></table></figure></p><p>迭代器<br>迭代器希望提供一致的迭代方式，那么对于不同对象，我们需要指明的是</p><ul><li>迭代的下一个对象是什么？</li><li><p>迭代什么时候结束<br>正是因为有了迭代器，ES6可以使用统一的访问机制for …of循环来遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeIterator</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nextIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        next:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextIndex&lt;array.length?</span><br><span class="line">            &#123;<span class="attr">value</span>:array[nextIndex++],<span class="attr">done</span>:<span class="literal">false</span>&#125;:</span><br><span class="line">            &#123;<span class="attr">value</span>:<span class="literal">undefined</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> it = makeIterator([<span class="string">'a'</span>,<span class="string">'b'</span>])</span><br><span class="line"><span class="built_in">console</span>.log(it.next())<span class="comment">//&#123; value: 'a', done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(it.next())<span class="comment">//&#123; value: 'b', done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(it.next())<span class="comment">//&#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>一种数据结构只要部署了Iterator接口，我们就称为这种数据结构是”可遍历的”</p></li><li>一个数据几个只要具有Symbol.iterator属性，就认为是”可遍历的”(iterable)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    <span class="comment">//实现接口</span></span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]:<span class="function"><span class="params">()</span>=&gt;</span>(&#123;</span><br><span class="line">        next:<span class="function"><span class="params">()</span>=&gt;</span>(&#123;</span><br><span class="line">            value:<span class="number">1</span>,</span><br><span class="line">            done:counter++&gt;<span class="number">3</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j <span class="keyword">of</span> obj)&#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">'obj'</span>,j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>与Generator函数除了状态机，还是一个便利器对象的生成函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OddDouble</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(list)&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">    *[Symble.iterator]()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> <span class="keyword">this</span>.list)&#123;</span><br><span class="line">            <span class="keyword">yield</span> item%<span class="number">2</span>?item*<span class="number">2</span>:item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> <span class="keyword">new</span> OddDouble([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;历史与概念&quot;&gt;&lt;a href=&quot;#历史与概念&quot; class=&quot;headerlink&quot; title=&quot;历史与概念&quot;&gt;&lt;/a&gt;历史与概念&lt;/h2&gt;&lt;h3 id=&quot;Evergreen-Browsers&quot;&gt;&lt;a href=&quot;#Everg
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.maoxin.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.maoxin.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>面向对象的JavaScript</title>
    <link href="http://www.maoxin.site/2018/09/26/js-6/"/>
    <id>http://www.maoxin.site/2018/09/26/js-6/</id>
    <published>2018-09-26T03:19:20.000Z</published>
    <updated>2018-11-01T09:32:26.107Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="定义对象属性"><a href="#定义对象属性" class="headerlink" title="定义对象属性"></a>定义对象属性</h2><h3 id="一般方法"><a href="#一般方法" class="headerlink" title="一般方法"></a>一般方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">person.a = <span class="number">1</span>;</span><br><span class="line">person[<span class="string">"a"</span>]=<span class="number">1</span>;</span><br><span class="line">person = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="高级方法"><a href="#高级方法" class="headerlink" title="高级方法"></a>高级方法</h3><p>需要明确一下几个概念：</p><ul><li><p>数据属性:</p><ul><li>Configurable:表示能否通过delete属性而重新定义属性</li><li>enumerable:表示能否通过foreach循环来获得属性</li><li>writable:表名属性是否可以修改</li><li>value: 定义初始值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person,<span class="string">"name"</span>,&#123;</span><br><span class="line">    writable:<span class="literal">false</span>,</span><br><span class="line">    value:<span class="string">"Nicholas"</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.info(person.name);</span><br><span class="line">person.name = <span class="string">"Greg"</span>;</span><br><span class="line"><span class="built_in">console</span>.info(person.name);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>访问器属性:</p><ul><li>访问器属性相比于数据属性没有writable和value，新增了get和set属性,一般对私有属性进行get/set方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">    _year:<span class="number">2004</span>,</span><br><span class="line">    edition:<span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(book,<span class="string">"year"</span>,&#123;</span><br><span class="line">    get:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._year;</span><br><span class="line">    &#125;</span><br><span class="line">    set:<span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(newValue&gt;<span class="number">2004</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>._year = newValue;</span><br><span class="line">            <span class="keyword">this</span>.edition+=newValue - <span class="number">2004</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">book.year = <span class="number">2005</span>;</span><br><span class="line">alert(book.edition);<span class="comment">//2</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>创建私有的访问器属性之后设置具体的值经过get/set方法为数据的访问增加了一个中间层，在中间层内部增加类似监听器的东西可以实现“观察者模式”,例如MVVM框架所能做到的对对象属性的修改能及时反馈到对应的界面上。</p><h3 id="创建对象-工厂模式"><a href="#创建对象-工厂模式" class="headerlink" title="创建对象-工厂模式"></a>创建对象-工厂模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name,age,job</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o.name = name;</span><br><span class="line">    o.age = age;</span><br><span class="line">    o.job = job;</span><br><span class="line">    o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建对象-构造函数"><a href="#创建对象-构造函数" class="headerlink" title="创建对象-构造函数"></a>创建对象-构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,job</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>,<span class="number">29</span>,<span class="string">"Software Engineer"</span>);</span><br></pre></td></tr></table></figure><ul><li>new 构造函数的执行步骤<ul><li>在内存中创建一个对象</li><li>将作用域指向这个对象</li><li>执行构造函数的代码</li><li>将该对象的引用返回<h2 id="创建对象-原型模式"><a href="#创建对象-原型模式" class="headerlink" title="创建对象-原型模式"></a>创建对象-原型模式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name = <span class="string">"Nicholas"</span>;</span><br><span class="line">Person.prototype.age = <span class="number">29</span>;</span><br><span class="line">Person.prototype.sayhello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.sayName();<span class="comment">//"Nicholas"</span></span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">person2.sayName();<span class="comment">//"Nicholas"</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>首先prototype是一个指针，指向这个对象</p><h3 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty()"></a>hasOwnProperty()</h3><p>检测来自实例的属性，而不是来自原型</p><h3 id="delete-Person1-name"><a href="#delete-Person1-name" class="headerlink" title="delete Person1.name"></a>delete Person1.name</h3><p>删除实例属性</p><h3 id="in-关键字"><a href="#in-关键字" class="headerlink" title="in 关键字"></a>in 关键字</h3><p>判断原型和实例中是否有</p><h3 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h3><p>遍历时无差别对待原型属性和实例属性</p><h3 id="认识构造函数和原型的问题"><a href="#认识构造函数和原型的问题" class="headerlink" title="认识构造函数和原型的问题"></a>认识构造函数和原型的问题</h3><ul><li>首先，构造函数每次执行相当于创建一个全新的对象，每一个实例都有自己的属性和方法，这样在效率上消耗太高</li><li>原型的缺点在于如果修改了一个属性值，其他所有属性值都变了。<h3 id="创建对象-组合"><a href="#创建对象-组合" class="headerlink" title="创建对象-组合"></a>创建对象-组合</h3>将属性值放到实例属性中，将方法写到原型中去。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,job</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.friends = [<span class="string">"shelby"</span>,<span class="string">"Court"</span>];</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: Person,</span><br><span class="line">    sayName:function()&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义SuperType的构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义Supertype的原型方法</span></span><br><span class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.proprety;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义子类的构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指明继承关系</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"><span class="comment">//添加子类方法</span></span><br><span class="line">SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.subProperty;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//重写父类方法</span></span><br><span class="line">SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义子类的原型方法</span></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</span><br><span class="line">instance1.colors.push(<span class="string">"black"</span>);</span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType();</span><br><span class="line"><span class="built_in">console</span>.info(instance2.colors);<span class="comment">//[ 'red', 'blue', 'green', 'black' ]</span></span><br></pre></td></tr></table></figure><p>发现一个问题，通过原型链继承的数据对象是在原型中的，这个会最大的问题就是数据成员的共享，当然在特定的条件下可以利用该特点。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承独立的数据成员的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//将构造函数的数据成员强制绑定到本地</span></span><br><span class="line">    SuperType.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</span><br><span class="line">instance1.colors.push(<span class="string">"black"</span>);</span><br><span class="line"><span class="built_in">console</span>.info(instance1.colors)<span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType();</span><br><span class="line"><span class="built_in">console</span>.info(instance2.colors)</span><br></pre></td></tr></table></figure></p><h2 id="两种方法的折中，组合继承"><a href="#两种方法的折中，组合继承" class="headerlink" title="两种方法的折中，组合继承"></a>两种方法的折中，组合继承</h2><ul><li>将想要继承的独立的数据成员使用构造函数继承方式</li><li>将函数成员或者共享的数据成员使用原型链继承<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>];</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//设置继承父类的数据成员作为自己的独立的</span></span><br><span class="line">    SuperType.call(<span class="keyword">this</span>,name);</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以说下面的三行代码都是完善继承关系的步骤</span></span><br><span class="line"><span class="comment">//指明prototype是从supertype()，使得subType具有了继承的层次,但是这里父类中有冗余的字段,优化步骤写在[2]中</span></span><br><span class="line"><span class="comment">//[1]</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"><span class="comment">//[2]上面代码的优化版本，通过定义空方法来</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">F.prototype = SuperType.prototype;</span><br><span class="line">SubType.prototype = <span class="keyword">new</span> F();</span><br><span class="line"><span class="comment">//添加SuperType的构造函数为Subtype</span></span><br><span class="line">SubType.prototype.constructor = SubType;</span><br><span class="line"><span class="comment">//再添加函数成员到原型中</span></span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="keyword">this</span>.age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">"Nicholas"</span>,<span class="number">29</span>);</span><br><span class="line">instance1.color.push(<span class="string">"black"</span>)</span><br><span class="line"><span class="built_in">console</span>.info(instance1.colors)</span><br><span class="line">instance1.sayName();</span><br><span class="line">instance1.sayAge();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType(<span class="string">"Greg"</span>,<span class="number">27</span>);</span><br><span class="line"><span class="built_in">console</span>.info(instance1.colors)</span><br><span class="line">instance1.sayName();</span><br><span class="line">instance1.sayAge();</span><br></pre></td></tr></table></figure></li></ul><h2 id="JavaScript语言的二义性"><a href="#JavaScript语言的二义性" class="headerlink" title="JavaScript语言的二义性"></a>JavaScript语言的二义性</h2><p>动态的语言许多看似简单的东西有丰富的用法，这个需要注意，这也往往是其坑所在</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;定义对象属性&quot;&gt;&lt;a href=&quot;#定义对象属性&quot; class=&quot;headerlink&quot; title=&quot;定义对象属性&quot;&gt;&lt;/a&gt;定义对象属性&lt;/h2&gt;&lt;h3 id=&quot;一般方法&quot;&gt;&lt;a href=&quot;#一般方法&quot; class=&quot;he
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.maoxin.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.maoxin.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JSON与AJAX和跨域通信</title>
    <link href="http://www.maoxin.site/2018/09/25/Server-01/"/>
    <id>http://www.maoxin.site/2018/09/25/Server-01/</id>
    <published>2018-09-24T16:27:19.000Z</published>
    <updated>2018-09-24T16:29:04.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JSON表示值的类型"><a href="#JSON表示值的类型" class="headerlink" title="JSON表示值的类型"></a>JSON表示值的类型</h2><ul><li><strong>不能</strong>表示<code>Undefined</code></li><li><code>Null</code>,<code>Boolean</code>,<code>number</code>,<code>String</code></li><li>对象</li><li>数组<h2 id="JSON-规范"><a href="#JSON-规范" class="headerlink" title="JSON 规范"></a>JSON 规范</h2></li><li>JSON是一种规范，是一种组织数据的格式</li><li>JSON字符串不能用单引号</li><li>JSON的属性必须是一个字符串表示<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//wrong in json, but right in javascript</span></span><br><span class="line">&#123;</span><br><span class="line">    name:<span class="string">"Maoxin"</span>,</span><br><span class="line">    age:<span class="number">29</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//right in json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"Maoxin"</span>,</span><br><span class="line">    <span class="string">"age"</span>:<span class="number">29</span>    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="JSON-序列化"><a href="#JSON-序列化" class="headerlink" title="JSON 序列化"></a>JSON 序列化</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//javascript object -&gt; JSON String</span></span><br><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">    title:<span class="string">"C++ Learn"</span>,</span><br><span class="line">    authors:[</span><br><span class="line">        <span class="string">"Nicholas C. Zakas"</span></span><br><span class="line">    ],</span><br><span class="line">    year:<span class="number">2011</span>,</span><br><span class="line">    edition:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> jsonText = <span class="built_in">JSON</span>.stringify(book)</span><br><span class="line"><span class="comment">//get attributes which we need to stringify</span></span><br><span class="line"><span class="keyword">var</span> need = <span class="built_in">JSON</span>.stringfy(book,[<span class="string">"title"</span>,<span class="string">"edition"</span>])</span><br><span class="line"><span class="comment">//&#123;"title":"C++ Learn","edition":3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//execute function according to attribute</span></span><br><span class="line"><span class="keyword">var</span> jsonText = <span class="built_in">JSON</span>.stringify(book,<span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(key)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"authors"</span>:</span><br><span class="line">            <span class="keyword">return</span> value.join(<span class="string">","</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"year"</span>:</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"edition"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//deliver the number of space to get a formated string</span></span><br><span class="line"><span class="keyword">var</span> jsonText = <span class="built_in">JSON</span>.stringify(book,<span class="literal">null</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure><ul><li>可以在对象中添加<code>toJSON</code>的属性来控制格式化那些东西<h2 id="JSON解析"><a href="#JSON解析" class="headerlink" title="JSON解析"></a>JSON解析</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">    title:<span class="string">"Javascript"</span>,</span><br><span class="line">    releaseDate: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2011</span>,<span class="number">11</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> jsonText = <span class="built_in">JSON</span>.stringify(book)</span><br><span class="line"><span class="keyword">var</span> bookCopy = <span class="built_in">JSON</span>.parse(jsonText,<span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(key==<span class="string">"releaseDate"</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(value);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><h3 id="XMLHttpRequest-基本"><a href="#XMLHttpRequest-基本" class="headerlink" title="XMLHttpRequest 基本"></a>XMLHttpRequest 基本</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">// 第三个参数是是否是异步的</span></span><br><span class="line">xhr.open(<span class="string">"get"</span>,<span class="string">"example.php"</span>,<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//注意调用的时候，不会真正的指向请求，而是准备发送，用send发送</span></span><br><span class="line"><span class="comment">//如果是GET请求，将body设置为null即可</span></span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h3 id="XMLHttpRequest-填充属性"><a href="#XMLHttpRequest-填充属性" class="headerlink" title="XMLHttpRequest - 填充属性"></a>XMLHttpRequest - 填充属性</h3><ul><li>responseText<br>如果返回的是文本将返回结果挂载在这里</li><li>responseXML 返回的是XML</li><li>status 状态码&gt;=200时候代表能够正确返回，当status=304通知浏览器本地缓存还可以使用</li><li>statusText</li></ul><p>以下为同步情况：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同步情况</span></span><br><span class="line"><span class="keyword">if</span>((chr.status&gt;=<span class="number">200</span>&amp;&amp;chr.status&lt;<span class="number">300</span>)||xhr.status==<span class="number">304</span>)&#123;</span><br><span class="line">    alert(xhr.responseText);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">"error info: "</span>+xhr.status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下为异步情况：采用注册事件的方式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在open和send之前</span></span><br><span class="line">xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((chr.status&gt;=<span class="number">200</span>&amp;&amp;chr.status&lt;<span class="number">300</span>)||xhr.status==<span class="number">304</span>)&#123;</span><br><span class="line">    alert(xhr.responseText);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        alert(<span class="string">"error info: "</span>+xhr.status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这里需要明确<code>readState</code>的变化过程</p><ul><li>0 未初始化</li><li>1 启动</li><li>2 发送</li><li>3 接收</li><li>4 完成<h3 id="abort-终止"><a href="#abort-终止" class="headerlink" title="abort 终止"></a>abort 终止</h3>使请求提前终止<h3 id="AJAX-XMLHttpRequest-Header"><a href="#AJAX-XMLHttpRequest-Header" class="headerlink" title="AJAX XMLHttpRequest Header"></a>AJAX XMLHttpRequest Header</h3></li><li>Accept: 浏览器能处理的内容类型</li><li>Accept-Charset：浏览器能显示的字符串</li><li>Accept-Encoding: 浏览器能够处理的压缩编码</li><li>Accept-Language:浏览器当前设置的语言</li><li>Connection：浏览器与服务器之间的连接的类型</li><li>Cookie:不解释</li><li>Host:发出请求页面所在的域</li><li>Referer:发送请求的页面URL，注意这个词是拼写错了，将错就错,referrer是正确的</li><li>User-Agent：浏览器用户代理字符串<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xhr.setRequestHeader(<span class="string">"MyHeader"</span>,<span class="string">"MyValue"</span>)</span><br><span class="line"><span class="comment">//Demo 模拟表单发送</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"user-info"</span>);</span><br><span class="line">xhr.send(serialize(form));</span><br></pre></td></tr></table></figure></li></ul><h3 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//A</span></span><br><span class="line">xhr.send(serialize(form));</span><br><span class="line"><span class="comment">//B</span></span><br><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"user-info"</span>);</span><br><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(form);</span><br><span class="line">formData.append(<span class="string">"name"</span>,<span class="string">"Maoxin"</span>);</span><br><span class="line">xhr.send(formData);</span><br></pre></td></tr></table></figure><h3 id="进度事件"><a href="#进度事件" class="headerlink" title="进度事件"></a>进度事件</h3><ul><li><code>onload</code> 响应完成触发</li><li><code>onprocess</code> 接受过程中触发的事件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xhr.onprogress = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> divStatus = <span class="built_in">document</span>.getElementById(<span class="string">"status"</span>);</span><br><span class="line">    <span class="keyword">if</span>(event.lengthComputable)&#123;</span><br><span class="line">        divStatus.innerHTML = <span class="string">"Received"</span> +event.position+<span class="string">"of"</span>+event.totalSize+<span class="string">"bytes"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="跨域通信"><a href="#跨域通信" class="headerlink" title="跨域通信"></a>跨域通信</h2><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JSON表示值的类型&quot;&gt;&lt;a href=&quot;#JSON表示值的类型&quot; class=&quot;headerlink&quot; title=&quot;JSON表示值的类型&quot;&gt;&lt;/a&gt;JSON表示值的类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不能&lt;/strong&gt;表示&lt;code&gt;Undef
      
    
    </summary>
    
      <category term="操作系统" scheme="http://www.maoxin.site/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Server杂项" scheme="http://www.maoxin.site/tags/Server%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>蛋疼的JavaScript(五)引用类型</title>
    <link href="http://www.maoxin.site/2018/09/23/js-5/"/>
    <id>http://www.maoxin.site/2018/09/23/js-5/</id>
    <published>2018-09-23T01:53:40.000Z</published>
    <updated>2018-11-01T09:32:18.194Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="配置式构造对象"><a href="#配置式构造对象" class="headerlink" title="配置式构造对象"></a>配置式构造对象</h2><p>常用的传入参数在不能满足成员是动态的时候的情况<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setObject</span>(<span class="params">name,age,school</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        name:name,</span><br><span class="line">        age:age,</span><br><span class="line">        school:school</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以使用配置式的来满足动态需求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setObject</span>(<span class="params">configure</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> configure</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="列表的简单操作"><a href="#列表的简单操作" class="headerlink" title="列表的简单操作"></a>列表的简单操作</h2><h3 id="栈方法和队列方法"><a href="#栈方法和队列方法" class="headerlink" title="栈方法和队列方法"></a>栈方法和队列方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">a.push(<span class="number">4</span>);      <span class="comment">//4加入末尾</span></span><br><span class="line"><span class="built_in">console</span>.info(a)</span><br><span class="line">a.unshift(<span class="number">0</span>)    <span class="comment">//0加入队首</span></span><br><span class="line"><span class="built_in">console</span>.info(a)</span><br><span class="line">a.pop()         <span class="comment">//4从尾部弹出</span></span><br><span class="line"><span class="built_in">console</span>.info(a)</span><br><span class="line">a.shift()       <span class="comment">//0从队首弹出</span></span><br><span class="line"><span class="built_in">console</span>.info(a)</span><br><span class="line">a.unshift(<span class="number">7</span>)    <span class="comment">//7加入在首部</span></span><br><span class="line"><span class="built_in">console</span>.info(a)</span><br><span class="line">a.unshift(<span class="number">8</span>)    <span class="comment">//8加入到首部</span></span><br><span class="line"><span class="built_in">console</span>.info(a)</span><br><span class="line">a.shift()       <span class="comment">//从首部弹出</span></span><br><span class="line"><span class="built_in">console</span>.info(a)</span><br></pre></td></tr></table></figure><p>注意JavaScript不是说队列或者栈方法将整体看作一个队列，而是说通过以上方法来实现栈和队列的操作。</p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ul><li>倒置:reverse()</li><li>排序:sort()<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>];</span><br><span class="line">a.sort(<span class="function"><span class="keyword">function</span>(<span class="params">prev,next</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> prec - next;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><ul><li><p>foreach方法，传入两个参数，一个是元素的值，一个是下标</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">a.foreach(<span class="function"><span class="keyword">function</span>(<span class="params">obj,index</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.info(obj,index)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>filter方法，传入一个参数，元素值，返回数组是经过过滤为true的新的数据集</p></li><li><p>map方法，map是将迭代的元素都经过一次操作，最终返回一个新数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> b = a.map(<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c*<span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.info(b)</span><br><span class="line"><span class="comment">//[2,4,6]</span></span><br></pre></td></tr></table></figure></li><li><p>reduce方法</p></li></ul><p>先上代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">c,d</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c+d;</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="comment">//6</span></span><br></pre></td></tr></table></figure></p><p>就这样完成了数组相加,首先reduce接受两个参数，一个是回调，这个回调负责将问题规模减小，第二个值是初始值，而回调接受两个参数，一个是初始值，一个是当前值，将初始值与当前值相加之后返回到作为初始值继续操作。下面的代码很容易猜到就是10<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">c,d</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c+d;</span><br><span class="line">&#125;,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure></p><p>下面这个利用reduce完成map方法的功能<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> b = a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">c,d</span>)</span>&#123;</span><br><span class="line">    c.push(d*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;,[])</span><br></pre></td></tr></table></figure></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><ul><li>函数命名在递归程序的耦合<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> num + <span class="built_in">arguments</span>.callee(num<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>可见这个<code>callee</code>是在该函数中被调用的方法,<code>caller</code>是调用者的方法，注意在严格模式下无法访问</p><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>表征函数当前作用域，详情见之前的this总结</p><h3 id="call-amp-apply"><a href="#call-amp-apply" class="headerlink" title="call&amp;apply"></a>call&amp;apply</h3><p>其都是说让函数在特定的，apply和call的区别在于call传入的是单个参数，apply是传入的数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    result:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.result = (+a + +b);</span><br><span class="line">&#125;</span><br><span class="line">sum.call(o,<span class="string">'1'</span>,<span class="string">'2'</span>)</span><br><span class="line"><span class="built_in">console</span>.info(o.result);<span class="comment">//3</span></span><br><span class="line">sum.apply(o,[<span class="string">'1'</span>,<span class="string">'3'</span>])</span><br><span class="line"><span class="built_in">console</span>.info(o.result)<span class="comment">//4</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;配置式构造对象&quot;&gt;&lt;a href=&quot;#配置式构造对象&quot; class=&quot;headerlink&quot; title=&quot;配置式构造对象&quot;&gt;&lt;/a&gt;配置式构造对象&lt;/h2&gt;&lt;p&gt;常用的传入参数在不能满足成员是动态的时候的情况&lt;br&gt;&lt;figu
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.maoxin.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.maoxin.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>蛋疼的JavaScript(四) 语句与函数</title>
    <link href="http://www.maoxin.site/2018/09/19/JS-04/"/>
    <id>http://www.maoxin.site/2018/09/19/JS-04/</id>
    <published>2018-09-19T02:58:37.000Z</published>
    <updated>2018-11-01T09:32:09.307Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="JavaScript中的-的语意"><a href="#JavaScript中的-的语意" class="headerlink" title="JavaScript中的()的语意"></a>JavaScript中的<code>()</code>的语意</h3><ol><li>作为函数调用运算符</li><li>函数参数占位符号</li><li>强制运算符，返回结果</li></ol><p>只要以上明白了，下面就很好理解了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><p>由于函数是一个作用域块，所以能够做到变量的隐藏。</p><h3 id="void-运算符"><a href="#void-运算符" class="headerlink" title="void()运算符"></a>void()运算符</h3><p>与()的第三个语意相反，是求值但是不返回</p><h3 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h3><ul><li>在堆中的对象在函数参数传递的时候是传递指针的值，所以能够做到共享</li><li>但是如果在栈中的值得拷贝就需要注意没有修改原值。</li></ul><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><ul><li>在严格模式下(严格模式下在函数前使用<code>&quot;use strict&quot;;</code>) arguments与传入的形参是没有联系的，修改arguments下的值是不会反映到形参的变化的</li><li>在非严格模式下，有联系</li><li>JS没有函数重载，使用arguments可以模拟重载</li><li>arguments不是数组，想要转换为数组可以使用数组原型对应的方法：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[].slice.call(<span class="built_in">arguments</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;JavaScript中的-的语意&quot;&gt;&lt;a href=&quot;#JavaScript中的-的语意&quot; class=&quot;headerlink&quot; title=&quot;JavaScript中的()的语意&quot;&gt;&lt;/a&gt;JavaScript中的&lt;code&gt;(
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.maoxin.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.maoxin.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>蛋疼的JavaScript(三)数据类型&amp;运算符</title>
    <link href="http://www.maoxin.site/2018/09/18/js-03/"/>
    <id>http://www.maoxin.site/2018/09/18/js-03/</id>
    <published>2018-09-18T14:45:49.000Z</published>
    <updated>2018-11-01T09:32:01.309Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="typeof-探测类型"><a href="#typeof-探测类型" class="headerlink" title="typeof 探测类型"></a>typeof 探测类型</h2><ul><li>type探测的类型是基本的数据类型，对于对象，他分不清是哪种object（除了function）,也就是说它深入不到构造方法级别的类型检测，这也是与instanceof的区别</li><li><img src="1.png" alt="类型检测"></li><li>在控制台下有个好处可以很具体的看到返回的类型都是string的</li></ul><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>从常见的几种转换入手：</p><ul><li>布尔类型的转换</li></ul><p><img src="2.png" alt="布尔类型转换"></p><ul><li>数字类型的强制类型转换</li></ul><p><img src="3.png" alt="整数类型转换"></p><p>注意其可以做数值的进制转换</p><ul><li>转换为字符串</li></ul><p><img src="4.png" alt="字符串类型转换"></p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="一元"><a href="#一元" class="headerlink" title="一元+"></a>一元+</h3><p>如果后面是字符串那么就变为数字</p><h3 id="快捷转换为字符串"><a href="#快捷转换为字符串" class="headerlink" title="快捷转换为字符串"></a>快捷转换为字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">1</span>+<span class="string">""</span>;</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符-布尔类型的强制转换"><a href="#逻辑运算符-布尔类型的强制转换" class="headerlink" title="逻辑运算符:布尔类型的强制转换"></a>逻辑运算符:布尔类型的强制转换</h3><ul><li><p>两个逻辑非可以将其他类型转换为布尔类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.info(!!<span class="string">""</span>)<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.info(!<span class="string">""</span>)<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.info(![])<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.info(![<span class="number">1</span>])<span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li><p>完成代码的精，利用短路特性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="literal">true</span> &amp;&amp; (a=<span class="number">2</span>);<span class="comment">//加括号是运算符优先级的问题</span></span><br></pre></td></tr></table></figure></li><li><p>用于给一个默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认5分</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">score</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s || <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;typeof-探测类型&quot;&gt;&lt;a href=&quot;#typeof-探测类型&quot; class=&quot;headerlink&quot; title=&quot;typeof 探测类型&quot;&gt;&lt;/a&gt;typeof 探测类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;type探测的类型是
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.maoxin.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.maoxin.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTML5_1</title>
    <link href="http://www.maoxin.site/2018/09/18/HTML5-1/"/>
    <id>http://www.maoxin.site/2018/09/18/HTML5-1/</id>
    <published>2018-09-18T14:20:50.000Z</published>
    <updated>2018-11-01T09:30:02.002Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML5新增的语义化元素"><a href="#HTML5新增的语义化元素" class="headerlink" title="HTML5新增的语义化元素"></a>HTML5新增的语义化元素</h2><a id="more"></a><p><img src="1.png" alt="HTML的语义化元素"></p><h2 id="HTML的最佳实践"><a href="#HTML的最佳实践" class="headerlink" title="HTML的最佳实践"></a>HTML的最佳实践</h2><ul><li>选择标记元素要有代表性，不要老是<code>&lt;div&gt;&lt;/div&gt;</code></li><li>不要忘记文档类型申明</li><li>不要忘记字符编码申明，在<code>&lt;head&gt;</code>元素中应该有<code>&lt;meta charset=&#39;UTF=8&#39;&gt;</code></li><li>不要使用HTML5不再支持的标记，如<code>&lt;center&gt;</code>,<code>&lt;font&gt;</code>,<code>&lt;basefont&gt;</code>,<code>&lt;big&gt;</code></li><li>不要使用HTML5不再支持的Tag属性 如<code>table</code>、<code>img</code>等标记的<code>align</code>和<code>border</code>属性，能用CSS就用CSS</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTML5新增的语义化元素&quot;&gt;&lt;a href=&quot;#HTML5新增的语义化元素&quot; class=&quot;headerlink&quot; title=&quot;HTML5新增的语义化元素&quot;&gt;&lt;/a&gt;HTML5新增的语义化元素&lt;/h2&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.maoxin.site/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>WindowsAPI常用概念&amp;结构体&amp;工具函数（一）</title>
    <link href="http://www.maoxin.site/2018/09/16/WindowsAPI_01/"/>
    <id>http://www.maoxin.site/2018/09/16/WindowsAPI_01/</id>
    <published>2018-09-16T09:09:15.000Z</published>
    <updated>2018-09-16T15:28:39.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="进程与线程的关系"><a href="#进程与线程的关系" class="headerlink" title="进程与线程的关系"></a>进程与线程的关系</h3><ul><li>进程更像是一个空间上的概念，而线程是真正的代码执行过程，利用进程的的资源，所以在Windows调用<code>CreateProcess</code>来创建一个进程的时候返回的<code>_PROCESS_INFOMATION</code>结构体包含了进程标识和线程标识两方面的信息</li><li>进程在执行过程中可能创建多个新的进程。创建进程成为称为父进程，而新的进程称之为子进程，构成的是一个“进程树”的结构<h3 id="ID与句柄"><a href="#ID与句柄" class="headerlink" title="ID与句柄"></a>ID与句柄</h3></li><li><p>在windows下内核对象的种类很多，物理是文件、进程、线程、事件、管道、互斥锁、信号量等等都是都是内核对象的，具体可以查阅MSDN文档关于<code>CloseHandle</code>函数的解释：<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms724211%28v=vs.85%29.aspx?f=255&amp;MSPPError=-2147217396" target="_blank" rel="noopener">点击前往</a></p></li><li><p>在内核中管理这些对象是通过内核对象ID的来维护的，能够通过ID来指向内核区具体的数据结构，不会将地址直接暴露给应用层。</p></li><li>句柄表是进程所拥有的，每个进程都有一个句柄表来维护这个进程所创建&amp;打开的内核对象</li><li>之前提到了进程树，子进程是可以共享父进程的资源（内核对象），共享的方式是继承，在创建进程的时候可以选择继承进程句柄和线程句柄</li><li>内核对象在内核中的ID是一定的，但是句柄中的值是不一定的，就好比两个进程同时打开同一个对象，在进程中记录的句柄表同一个的对象对应的句柄是不一样的，但是ID是一样的。</li><li>每个内核对象都有对应的表示标明是否可以被继承<h2 id="内核对象的生命周期"><a href="#内核对象的生命周期" class="headerlink" title="内核对象的生命周期"></a>内核对象的生命周期</h2>内核对象都有个计数器，计数器计数的值代表的是被引用的次数，一般的内核对象只需要</li><li>内核对象计数器为0</li></ul><p>就可以关闭，但是对于Thread以及Process内核对象情况有些特殊它要满足：</p><ul><li>内核对象计数器为０</li><li>执行流程结束</li></ul><h2 id="相关结构体"><a href="#相关结构体" class="headerlink" title="相关结构体"></a>相关结构体</h2><h3 id="STARTUPINFO"><a href="#STARTUPINFO" class="headerlink" title="STARTUPINFO"></a>STARTUPINFO</h3><p>从名字也可以看出，StartUpInfo保存着一些启动的信息</p><h3 id="PROCESS-INFOMATION"><a href="#PROCESS-INFOMATION" class="headerlink" title="_PROCESS_INFOMATION"></a>_PROCESS_INFOMATION</h3><p>进程结构体类型，具体的内容如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PROCESS_INFORMATION</span> &#123;</span></span><br><span class="line">  HANDLE hProcess;<span class="comment">//进程句柄</span></span><br><span class="line">  HANDLE hThread;<span class="comment">//线程句柄</span></span><br><span class="line">  DWORD  dwProcessId;<span class="comment">//进程ID</span></span><br><span class="line">  DWORD  dwThreadId;<span class="comment">//线程ID</span></span><br><span class="line">&#125; PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;</span><br></pre></td></tr></table></figure></p><h3 id="SECURITY-ATTRIBUTES"><a href="#SECURITY-ATTRIBUTES" class="headerlink" title="SECURITY_ATTRIBUTES"></a>SECURITY_ATTRIBUTES</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SECURITY_ATTRIBUTES</span> &#123;</span></span><br><span class="line">  DWORD  nLength;<span class="comment">//结构体长度</span></span><br><span class="line">  LPVOID lpSecurityDescriptor;<span class="comment">//指向安全描述符，指明当前对象的用户权限信息等等，默认与父进程相同</span></span><br><span class="line">  BOOL   bInheritHandle;<span class="comment">//当前内核对象是否允许继承</span></span><br><span class="line">&#125; SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;</span><br></pre></td></tr></table></figure><p>如果在创建内核对象的时候不想继承，那么传入该项结构体的值只需要填写<code>NULL</code>即可<br><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa379560%28v=vs.85%29.aspx?f=255&amp;MSPPError=-2147217396" target="_blank" rel="noopener">文档地址</a></p><h2 id="工具函数"><a href="#工具函数" class="headerlink" title="工具函数"></a>工具函数</h2><h3 id="GetStartupInfo"><a href="#GetStartupInfo" class="headerlink" title="GetStartupInfo()"></a>GetStartupInfo()</h3><p>获取当前进程的初始化信息，由父进程负责填充相关的<code>STARTUPINFO</code>结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">STARTUPINFO si;</span><br><span class="line">GetStartupInfo(&amp;si)</span><br></pre></td></tr></table></figure></p><p>由于我们即使填写了部分内容也不会都作用到最终的进程创建，我们常规的初始化步骤是：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">STARTUPINFO si;</span><br><span class="line">ZeroMemory(&amp;si,sizeod(si))</span><br><span class="line">si.cb = <span class="keyword">sizeof</span>(si)</span><br></pre></td></tr></table></figure></p><h3 id="CloseHandle"><a href="#CloseHandle" class="headerlink" title="CloseHandle()"></a>CloseHandle()</h3><p>将内核对象计数器的值减一</p><h3 id="GetStdHandle"><a href="#GetStdHandle" class="headerlink" title="GetStdHandle()"></a>GetStdHandle()</h3><p><a href="https://docs.microsoft.com/en-us/windows/console/getstdhandle" target="_blank" rel="noopener">文档地址</a></p><h3 id="WaitForSingleObject"><a href="#WaitForSingleObject" class="headerlink" title="WaitForSingleObject()"></a>WaitForSingleObject()</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;h3 id=&quot;进程与线程的关系&quot;&gt;&lt;a href=&quot;#进程与线程的关系&quot; class=&quot;headerlink&quot; title=&quot;进程与线程的关系&quot;
      
    
    </summary>
    
    
      <category term="操作系统" scheme="http://www.maoxin.site/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>C中sizeof的实现</title>
    <link href="http://www.maoxin.site/2018/09/14/C-1/"/>
    <id>http://www.maoxin.site/2018/09/14/C-1/</id>
    <published>2018-09-14T14:46:52.000Z</published>
    <updated>2018-11-01T09:29:03.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C语言中Sizeof的实现"><a href="#C语言中Sizeof的实现" class="headerlink" title="C语言中Sizeof的实现"></a>C语言中Sizeof的实现</h2><p>今天群里面提了一个问题，sizeof这个功能是怎么实现的，自己一时半会儿也没有思路，上网找了找实现，发现非常的巧妙，总结如下：<br><a id="more"></a></p><ul><li>sizeof不是一个函数，是一个宏</li><li>对于非数组的实现<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#defne _sizeof(T) ( (size_t)((T*)0 + 1))</span></span><br></pre></td></tr></table></figure></li></ul><p>首先将对应类型转换为指针地址，通过指针加一地址自动移动位置之后确定位置</p><ul><li>数组类型的实现<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> array_sizeof(T)   ( (size_t)(&amp;T+1)  - (size_t)(&amp;T)  )</span></span><br></pre></td></tr></table></figure></li></ul><p>假设传入的是一个<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure></p><p>求地址操作会返回一个类型为<code>int[10]*</code>的指针，那么它一次移动的位数就是一个<code>int[10]</code>的长度</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>其都是通过指针移位的步长来解决的</li><li>对具体类型，用具体类型的指针</li><li>对于数组，用指向数组的指针</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;C语言中Sizeof的实现&quot;&gt;&lt;a href=&quot;#C语言中Sizeof的实现&quot; class=&quot;headerlink&quot; title=&quot;C语言中Sizeof的实现&quot;&gt;&lt;/a&gt;C语言中Sizeof的实现&lt;/h2&gt;&lt;p&gt;今天群里面提了一个问题，sizeof这个功能是怎么实现的，自己一时半会儿也没有思路，上网找了找实现，发现非常的巧妙，总结如下：&lt;br&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://www.maoxin.site/categories/C-C/"/>
    
    
      <category term="C" scheme="http://www.maoxin.site/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Type类型</title>
    <link href="http://www.maoxin.site/2018/09/12/Type%E7%B1%BB%E5%9E%8B/"/>
    <id>http://www.maoxin.site/2018/09/12/Type类型/</id>
    <published>2018-09-12T14:43:19.000Z</published>
    <updated>2018-09-17T15:07:00.293Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从泛型到Type类型接口"><a href="#从泛型到Type类型接口" class="headerlink" title="从泛型到Type类型接口"></a>从泛型到Type类型接口</h2><p>众所周知，Java的泛型都是通过类型擦除来完成的，也就是说当Javac编译之后，所以的泛型参数都被打回原型，而之所以使用类型擦除实现泛型的原因主要是为了向下兼容。那么这样会有如下的问题：</p><ul><li>Java不能描述通过参数化之后的泛型类型，里面怎么参数化的一概不知</li></ul><p>但是在有些场景我们需要对传入的具体的参数化类型进行检测处理，之前的类型系统都依赖与<code>Class</code>本身描述信息，现在Java需要能够描述泛型的参数化过程，通过参数化泛型产生的新类型无非不过是基本的<code>Class</code>类型的组合,Java最后引入了Type接口以及一些子类来统一引入泛型之后的类型系统。</p><h2 id="Type是怎样统一Java的类型系统的"><a href="#Type是怎样统一Java的类型系统的" class="headerlink" title="Type是怎样统一Java的类型系统的"></a>Type是怎样统一Java的类型系统的</h2><p><strong>以下为个人的理解</strong></p><p>在泛型之前，Java类型除了原生类型都可以使用Class来描述，在泛型之后，新增了许多“新”的类型：</p><ol><li>参数化泛型类的类型，如<code>Collection&lt;T&gt;</code></li><li>参数化泛型类型构成的数组类型，如<code>Animal&lt;T&gt;[]</code></li><li>泛型参数构成的类型（泛型方法），如<code>&lt;E&gt;void method(E e){}</code>中的<code>E e</code>又或者是<code>ArrayList&lt;E&gt;</code>中的<code>E</code></li><li>通配符表达的类型，如<code>void printColl(ArrayList&lt;? extends Number&gt;al)</code>中的<code>? extends Number</code><br>上面四种类型和Class为了统一都实现了<code>Type</code>接口<h2 id="Type类型的关系"><a href="#Type类型的关系" class="headerlink" title="Type类型的关系"></a>Type类型的关系</h2><h3 id="Parameterizedtype"><a href="#Parameterizedtype" class="headerlink" title="Parameterizedtype"></a>Parameterizedtype</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang.reflect;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.MalformedParameterizedTypeException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ParameterizedType</span> <span class="keyword">extends</span> <span class="title">Type</span> </span>&#123;</span><br><span class="line">   Type[] getActualTypeArguments();</span><br><span class="line">   <span class="function">Type <span class="title">getRawType</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function">Type <span class="title">getOwnerType</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li></ol><p>由于对于参数化泛型类对象中的泛型是可以嵌套的，所以需要注意返回的是除去一个嵌套之后的Type子类型。</p><ol><li>对于ArrayList&lt;ArrayList<integer>&gt; al,执行该方法去掉&lt;&gt;返回的是ArrayList<integer>所以还是参数化类型。如果再执行一次返回的就是Class类型</integer></integer></li><li>对于传入的不是具体如ArrayList<e>返回的就是TypeVariable</e></li><li>对于<code>ArrayList&lt;? extends Number&gt;</code>返回的是<code>? extends Number</code> 是WildcardType</li><li>对于<code>ArrayList&lt;E[]&gt;</code>返回<code>E[]</code>是GenericArrayType</li></ol><ul><li>getRawType()<br>简单的说就是得到&lt;&gt;前的原始类型</li><li>getOwnerType();得到类型的所有者类型，例如Map.Entry就是Map的所有者类型</li><li>getActualTypeArguments()<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码来自https://segmentfault.com/q/1010000000655631</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Method method = <span class="keyword">new</span> GenericDemo().getClass().getMethod(<span class="string">"applyMethod"</span>,Map.Entry.class);</span><br><span class="line">    Type[] types = method.getGenericParameterTypes();</span><br><span class="line">    ParameterizedType pType = (ParameterizedType)types[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回所有者类型，打印结果是interface java.util.Map</span></span><br><span class="line">    System.out.println(pType.getOwnerType());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T,U&gt; <span class="function"><span class="keyword">void</span> <span class="title">applyMethod</span><span class="params">(Map.Entry&lt;T,U&gt; mapEntry)</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="认识具体的Type类型以及相关方法"><a href="#认识具体的Type类型以及相关方法" class="headerlink" title="认识具体的Type类型以及相关方法"></a>认识具体的Type类型以及相关方法</h2><p>### </p><h2 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p> <a href="https://blog.csdn.net/gdutxiaoxu/article/details/68926515" target="_blank" rel="noopener">java Type详解</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/z69183787/article/details/54314169" target="_blank" rel="noopener">Java类型中ParameterizedType，GenericArrayType，TypeVariabl，WildcardType详解</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;从泛型到Type类型接口&quot;&gt;&lt;a href=&quot;#从泛型到Type类型接口&quot; class=&quot;headerlink&quot; title=&quot;从泛型到Type类型接口&quot;&gt;&lt;/a&gt;从泛型到Type类型接口&lt;/h2&gt;&lt;p&gt;众所周知，Java的泛型都是通过类型擦除来完成的，也就是说当
      
    
    </summary>
    
      <category term="Java" scheme="http://www.maoxin.site/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.maoxin.site/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Git 学习</title>
    <link href="http://www.maoxin.site/2018/09/10/Git/"/>
    <id>http://www.maoxin.site/2018/09/10/Git/</id>
    <published>2018-09-10T13:55:26.000Z</published>
    <updated>2018-11-01T09:29:49.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GIT精简教程"><a href="#GIT精简教程" class="headerlink" title="GIT精简教程"></a>GIT精简教程</h2><p>简单记录<br><a id="more"></a></p><h3 id="集中式和分布式"><a href="#集中式和分布式" class="headerlink" title="集中式和分布式"></a>集中式和分布式</h3><p>集中式类似CVS必须联网工作，这样对带宽有要求，在网络环境下缺陷显著。而分布式管理系统没有“中央服务器”之称，每个人的电脑是一个完整的版本库。“单点失败”的问题可以被解决，每个人在自己的电脑上修改了文件，相互之间将各自的修改推送给对方即可<br>其他要点：</p><ul><li><p>CVS是最早开源的集中式版本控制系统，本身有缺陷，同样是开源且免费的SVN修正CVS稳定性问题，是目前使用最多的集中式版本控制系统</p><h3 id="安装之后的配置"><a href="#安装之后的配置" class="headerlink" title="安装之后的配置"></a>安装之后的配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"maoxin"</span></span><br><span class="line">git config --global user.email <span class="string">"lumaoxin@aliyun.com"</span></span><br></pre></td></tr></table></figure></li><li><p>其中–global 表示所以的git仓库都使用该配置</p></li></ul><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><p>在文件夹内部使用<code>git init</code>命令将当前文件夹变为git仓库，这时会创建隐藏目录<code>.git</code></p><h3 id="添加文件到仓库"><a href="#添加文件到仓库" class="headerlink" title="添加文件到仓库"></a>添加文件到仓库</h3><p>首先需要明确，所有的版本控制系统，只能跟踪文本文件的改动，而二进制文件的改动不能被跟踪<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add readme.txt</span><br></pre></td></tr></table></figure></p><p>没有消息就是最好的消息，</p><h3 id="提交文件到仓库"><a href="#提交文件到仓库" class="headerlink" title="提交文件到仓库"></a>提交文件到仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"wrote a readme file"</span></span><br></pre></td></tr></table></figure><ul><li>使用commit来提交 -m之后是本次提交的说明</li><li>可以add多个文件之后一次性commit<h3 id="管理版本"><a href="#管理版本" class="headerlink" title="管理版本"></a>管理版本</h3>使用git log来查看版本的变更，提交的信息<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure></li></ul><p>这样会输入大量多行信息，如果想要精简信息，就需要：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=online</span><br></pre></td></tr></table></figure></p><ul><li>在信息会看到commitid是一串16进制值，这主要是git生成的Hash码，这样可以有效防止冲突</li><li>在git中HEAD表示当前版本，上一个是HEAD^,再上一个是HEAD^^,上100个版本是HEAD~100<h3 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h3>使用git reset来完成回退<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure></li></ul><p>这个时候再去看log已经找不到来自属于“未来”的信息了，要想回到未来，就需要使用commitid去寻找，没有必要写全<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 1094a</span><br></pre></td></tr></table></figure></p><p>而如何找到版本号，可以使用git reflog来查看每一次记录的命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure></p><h3 id="工作区和暂存区的概念"><a href="#工作区和暂存区的概念" class="headerlink" title="工作区和暂存区的概念"></a>工作区和暂存区的概念</h3><p>由于对于git这样的分布式版本管理工具，在本机有Master库，我们做的每一次修改如果都作为Master库的修改的话是不应该的，应该是我们先做一定的修改，确定后提交给Master库。那么在commit之前保存修改信息就是非常需要的，在git中使用stage，暂存区的概念。而我们再未add到暂存区之前对文件所做的所有操作，都是到“工作区”<br>我们通过以下命令来查看暂存区的状态：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></p><h3 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h3><p>git管理的是修改而不是文件，修改之后首先得add进storge中才会被之后的commit提交。</p><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><p>当修改的文件已经被add进缓存区中，可以使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- readme.txt</span><br></pre></td></tr></table></figure></p><p>这个时候是从撤销了该文件在暂存区的记录，同时注意它还会将在暂存取的记录还原到工作区</p><p><strong>总之以上命令相当于将文件恢复到add或者commit之前</strong><br>但是如果已经提交到暂存区，上面得到修改方式就不灵了，只能回到add之后的状态<br>我们可以使用一下命令将暂存区的修改撤销掉<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD readme.txt</span><br></pre></td></tr></table></figure></p><p>之后再丢弃工作区的修改即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- readme.txt</span><br></pre></td></tr></table></figure></p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>文件的删除本身也是修改，我们再add到git之后在工作区删除文件之后，用<code>git status</code>命令也可以找到本次的修改,使用如下的<code>git rm</code>来从版本库中删除<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm test.txt</span><br></pre></td></tr></table></figure></p><p>之后再去commit<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure></p><p>如果删除错了，可以时候check来回到commit之前的状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- test.txt</span><br></pre></td></tr></table></figure></p><h3 id="SSH加密认证原理"><a href="#SSH加密认证原理" class="headerlink" title="SSH加密认证原理"></a>SSH加密认证原理</h3><p><strong>对称加密</strong>：加密解密用同一个密钥，使用同一套加密算法，只是密钥不同（只要在网上传输这个密钥就是不安全的）</p><p><strong>RSA 非对称加密</strong>：这里不探讨非对称加密的原理，但是非对称加密有如下有意思的特点：</p><ul><li>用私钥加密的数据，只有对应的公钥才能够解密</li><li>用公钥加密的数据，只有对应的私钥才能解密</li><li>只要互相公布自己的公钥，即可完成双方信息的加密传输</li></ul><p>例如：B向A发送数据，A公布自己的公钥，B拿着公钥加密数据，传输到A之后A拿自己的私钥去解密。反之亦然，</p><p>稍微详细的过程如下：</p><ol><li>首先A、B双方，在通信前构建专属于自己的密钥对，假设分别是公钥A，私钥A，公钥B，私钥B； </li><li>A将自己的公钥A暴露给B，B通过私钥B和公钥A经过一定的运算产生出本地的密钥B； </li><li>同样，B将自己的公钥B暴露给A，A通过私钥A和公钥B经过一定的运算产生出本地的密钥A； </li><li>最后，这个算法有意思的一点就是，密钥A和密钥B是一致的，这样A、B双方就拥有了一个属于双方的“秘密”口令</li></ol><p><strong>非对称加密+对称加密</strong></p><p>RSA非对称加密速度很慢，每次都要采用非对称加密的方式传输太浪费资源，而对称加密速度比RSA快上数百倍，不如将对称加密密钥通过RSA传输之后通过对称加密方式。</p><p><strong>中间人劫持问题</strong></p><p>对于非对称加密，B要向A发送加密之后的信息首先要获取A的公钥，A在发送的时候被截取之后被中间人替换为中间人的公钥，这时，B就会拿着中间人的公钥去加密数据，再返回中间人，中间人用自己的私钥去解密，之后再用A的公钥加密。这种方式叫做中间人劫持</p><p><strong>问题的解决策略</strong>：CA 数字签名与证书（略）</p><p><strong>SSH简介</strong></p><p>简单说，SSH（Secure Shell）是一种<strong>非对称加密与对称加密算法相结合的安全网络协议</strong>，用于计算机通信加密。一个SSH会话的建立过程分为两个阶段：第一阶段，双方沟通并同意建立一个加密连接通道以供后续信息传输用；第二阶段，对请求接入的用户进行身份验证以确定服务器端是否要给该用户开放访问权限。</p><p><strong>SSH步骤</strong></p><ul><li><p>首先通过非对称加密来建立一条加密通道，通过得知双方的公钥和私钥可以获得这一特殊的密钥来加密数据</p></li><li><p>SSH密钥对的验证过程起始于上一部分加密通道建立之后，其具体执行步骤如下：客户端发送自己的密钥ID给服务器端，服务器在自己的authorized_keys文件中检查是否有此ID的公钥。如果有，则服务器生成一个随机数，用该公钥加密之后，服务器将加密后的随机数发给客户端。客户端用私钥解密该随机数，然后在本地为随机数做MD5哈希，客户端将该MD5哈希发给服务器端，服务器端为一开始自己生成的随机数也做一个MD5哈希，然后用通讯通道“公共的密钥”将该哈希加密，再跟客户端发来的内容进行对比。如果双方内容一致，则通过验证，开放访问权限给客户端</p><p>简单来说，服务器端用公钥加密信息，客户端用私钥解密信息以证明自己持有私钥。</p></li></ul><blockquote><p>参考：</p><p>CSDN博客  <a href="https://blog.csdn.net/u014206910/article/details/54691886" target="_blank" rel="noopener">啊塔-SSH加密认证原理</a></p><p>刘欣 《码农翻身》-机械工业出版社</p></blockquote><h3 id="使用远程仓库"><a href="#使用远程仓库" class="headerlink" title="使用远程仓库"></a>使用远程仓库</h3><p>创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></span><br></pre></td></tr></table></figure><p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p><h3 id="添加到远程库"><a href="#添加到远程库" class="headerlink" title="添加到远程库"></a>添加到远程库</h3><ol><li>首先在github中创建远程库</li><li>在本地仓库中链接</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add orgin git@github.com:XXXX/XXXX.git</span><br></pre></td></tr></table></figure><p>这样设置远程库的名字就是origin</p><ol start="3"><li>推送到远程库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><h3 id="从远程库拉取"><a href="#从远程库拉取" class="headerlink" title="从远程库拉取"></a>从远程库拉取</h3><p>使用<code>git clone</code>克隆本地库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:xxx/xxx.git</span><br></pre></td></tr></table></figure><blockquote><p>参考廖雪峰老师的GIT教程  <a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374027586935cf69c53637d8458c9aec27dd546a6cd6000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374027586935cf69c53637d8458c9aec27dd546a6cd6000</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;GIT精简教程&quot;&gt;&lt;a href=&quot;#GIT精简教程&quot; class=&quot;headerlink&quot; title=&quot;GIT精简教程&quot;&gt;&lt;/a&gt;GIT精简教程&lt;/h2&gt;&lt;p&gt;简单记录&lt;br&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://www.maoxin.site/categories/Tools/"/>
    
    
      <category term="Git" scheme="http://www.maoxin.site/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>蛋疼的JavaScript(二)this</title>
    <link href="http://www.maoxin.site/2018/09/10/js2/"/>
    <id>http://www.maoxin.site/2018/09/10/js2/</id>
    <published>2018-09-10T13:14:30.000Z</published>
    <updated>2018-11-01T09:31:37.587Z</updated>
    
    <content type="html"><![CDATA[<h3 id="烦人的this"><a href="#烦人的this" class="headerlink" title="烦人的this"></a>烦人的this</h3><p>JavaScript的表现与之前学的任何传统的语言都不一样，这个就很烦人，这几天把这个坑扫除了<br><a id="more"></a></p><h3 id="this到底指向什么"><a href="#this到底指向什么" class="headerlink" title="this到底指向什么"></a>this到底指向什么</h3><p>总的来说，总结下，this其实取决于调用者的上下文环境，好比直接调用函数，是在全局作用域下的，就是直接this就是Window<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn()<span class="comment">//Window</span></span><br></pre></td></tr></table></figure></p><p>而如果将作为对象中的属性，objA.objB.fun（）这个时候this就是objB<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">objA=&#123;</span><br><span class="line">    a:<span class="number">123</span>,</span><br><span class="line">    myfun:fun</span><br><span class="line">&#125;</span><br><span class="line">objA.fun()<span class="comment">//objA</span></span><br></pre></td></tr></table></figure></p><p>同样的道理可以延伸到对象的事件，注册事件其实就是将对应对象的上下文环境中的某个属性例如click绑定一个函数，这样的话，函数内部的this就是调用者本身<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">"#btn"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;<span class="comment">//&lt;input type="button"/&gt;</span></span><br></pre></td></tr></table></figure></p><p>需要注意的是，理解什么是上下文环境，千万不要把上下文环境错认为就是所谓的作用域<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnChain_1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">    fnChain_2()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnChain_2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">    fnChain_3()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnChain_3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">fnChain_1()</span><br><span class="line"><span class="comment">//三个都是Window</span></span><br></pre></td></tr></table></figure></p><p>上面实例代码是错误理解上下问环境的典范</p><h3 id="new-操作符创建时的this"><a href="#new-操作符创建时的this" class="headerlink" title="new 操作符创建时的this"></a>new 操作符创建时的this</h3><p>首先看一个简单的函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">foo()<span class="comment">//Window</span></span><br><span class="line"><span class="keyword">new</span> foo()<span class="comment">//foo</span></span><br></pre></td></tr></table></figure></p><p>在这里需要校正的观念是这里不存在类似其他语言的new调用构造函数，而是使用了“构造调用”，使用构造调用的方式来创建一个新的对象<br><code>new</code>操作符执行的步骤如下：</p><ol><li>首先创建一个新的对象</li><li>这个新对象执行[[原型]]链接</li><li>新对象会被绑定到执行函数调用的this<br>简而言之，new操作的this有点类似其他语言的this<br>下面是实例代码：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> foo(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> foo(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//foo&#123;a:2&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b)<span class="comment">//foo&#123;a:1&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="ES6的this"><a href="#ES6的this" class="headerlink" title="ES6的this"></a>ES6的this</h3><p>ES6引入了箭头函数，这时this的表现与我们之前接触的又不一样了，具体不同点如下:</p><ul><li>普通的函数的this取决于调用上下文</li><li>而ES6里面的this是继承父执行上下文的this<br>实例代码如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码来自于https://blog.csdn.net/qq_38563845/article/details/78145814</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"window"</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'obj'</span>,</span><br><span class="line">    <span class="comment">//普通函数</span></span><br><span class="line">    one: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//箭头函数</span></span><br><span class="line">    two: <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//普通函数中的箭头函数</span></span><br><span class="line">    three: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    (<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">   &#125;)()</span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="comment">//多层箭头函数</span></span><br><span class="line">    four: <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">    (<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">   &#125;)()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.one();    <span class="comment">//obj  </span></span><br><span class="line">obj.two();  <span class="comment">//window </span></span><br><span class="line">obj.three();  <span class="comment">//obj</span></span><br><span class="line">obj.four()    <span class="comment">//window</span></span><br></pre></td></tr></table></figure></li></ul><p>下面分析我们的想法来个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">         &#125;;</span><br><span class="line">      &#125;;</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br><span class="line">foo()()()()<span class="comment">//Window</span></span><br></pre></td></tr></table></figure></p><p>如果将上面的代码改为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo().call(&#123;<span class="attr">a</span>:<span class="string">"HelloWorld"</span>&#125;)()()()</span><br><span class="line"><span class="comment">//&#123;a:"HelloWorld"&#125;</span></span><br></pre></td></tr></table></figure></p><p>至于call是干什么的，接下来来解释</p><h3 id="主动修改this？call-amp-apply-amp-bind"><a href="#主动修改this？call-amp-apply-amp-bind" class="headerlink" title="主动修改this？call&amp;apply&amp;bind"></a>主动修改this？call&amp;apply&amp;bind</h3><p>call 和 apply 的效果都是一样的，只是参数不同，他们显式的修改要执行函数的this指向，如果将这种指向被一个函数包起来，那么这个绑定就被不会被解绑了，例如这个<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">retValue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.a</span><br><span class="line">    &#125;.call(obj)<span class="comment">//2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而apply就是有了参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单bind函数的实现，argument是参数列表</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">fn, obj</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn.apply( obj, <span class="built_in">arguments</span> );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>在 ES5 中提供了内置的方法 Function.prototype.bind，它的用法如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">something</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a, something );</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a + something;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a:<span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> bar = foo.bind( obj );</span><br><span class="line"><span class="keyword">var</span> b = bar( <span class="number">3</span> ); <span class="comment">// 2 3</span></span><br><span class="line"><span class="built_in">console</span>.log( b ); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></p><p><code>bind(..)</code> 会返回一个硬编码的新函数，它会把参数设置为 this 的上下文并调用原始</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;烦人的this&quot;&gt;&lt;a href=&quot;#烦人的this&quot; class=&quot;headerlink&quot; title=&quot;烦人的this&quot;&gt;&lt;/a&gt;烦人的this&lt;/h3&gt;&lt;p&gt;JavaScript的表现与之前学的任何传统的语言都不一样，这个就很烦人，这几天把这个坑扫除了&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.maoxin.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.maoxin.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JDBC设计思想</title>
    <link href="http://www.maoxin.site/2018/08/29/JDBC%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/"/>
    <id>http://www.maoxin.site/2018/08/29/JDBC设计思想/</id>
    <published>2018-08-29T03:29:33.000Z</published>
    <updated>2018-11-01T09:31:10.100Z</updated>
    
    <content type="html"><![CDATA[<p>更有利于了解JDBC建立链接过程的API<br><a id="more"></a></p><h2 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h2><p>从《码农翻身》，作者：刘欣   一书中了解JDBC的设计思想：</p><ul><li>首先，为了统一各大数据库不同数据库的具体实现，应该加一个抽象层，统一出一个一致的访问方式，利用接口规范方法，各大数据库厂商实现接口，这个问题可以解决。但是也引入了一个新的问题，这个问题就是在代码中要使用接口首先得声明具体实现，这就出现了违背了面向接口编程，是面向实现编程。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = <span class="keyword">new</span> MySqlConnectionImpl(info)；</span><br><span class="line"><span class="comment">//如果数据库厂商除了一个新的版本并且修改了名字是，MySqlConnectionJDBC4Impl,以上代码就无法编译通过</span></span><br></pre></td></tr></table></figure><ul><li>解决上面的问题就是再增加一个抽象层，类比我们计算机的外界设备的接口都是相同的，例如USB，但对不同的实现例如U盘，键盘只需安装不同的驱动即可，这样抽象出了一个驱动层，而JDBC吸收了这样的思想，抽象出一个Driver层。这个Driver层是一个简单工厂，其具体实现可以类比如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">(String dbType,Properties info)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"mysql"</span>.equals(dbType))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MySqlConnectionImpl(info);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"oracle"</span>.equals(dbType))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> OracleConnectionImpl(info);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"unsupported db type:"</span>+dbType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样其实是将原来的问题提升了个层次，在原来的代码中是不需要修改了，但是需要着重修改工厂方法中的具体实现，是相当于将问题转移。到目前为止我们是可以通过一下的方式来获取驱动：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = Driver.getConnection(<span class="string">"mysql"</span>,info);</span><br></pre></td></tr></table></figure><ul><li>正如上面所说，问题转移到了Driver这个静态工厂中，如果这个Driver是JDK提供的，那么就无法修改，除了修改又增加了一个问题。最后的解决方法是使用配置文件的方式，用配置文件这样“数据驱动”方式可以有效解决这样一个问题。但是这样的方式为用户暴露了太多东西，本身也是比较Low的，下面引入一种“工厂方法”的设计模式。</li><li>工厂方法与简单工厂最大的区别就是，工厂本身也变成了接口，将简单工厂中创建具体对象的责任通过厂商实现Driver接口来分配到各大厂商的JDBC实现类中去了，连创建都交给了数据库厂商的驱动中实现，这样对于我们自己写的程序就很少了，只需要使用类加载器加载驱动之后创建实例强转成Driver了类似与以下代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Driver</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">(Properties info)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlDriver</span> <span class="keyword">implements</span> <span class="title">Driver</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">(Properties info)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MySqlConnection(info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>创建过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt;clz = Class.forName(<span class="string">"com.coderising.mysql.MySqlDriver"</span>);</span><br><span class="line">Driver driver = (Driver)clz.newInstace();</span><br><span class="line">Connection conn = driver.getConnection(info);</span><br></pre></td></tr></table></figure><ul><li>上面的代码已经相当于把职责分清楚了，数据库厂商负责Driver的具体实现，已经可以做到不用修改源代码了。这个时候唯一的问题就是将反射创建以及强转的过程暴露给开发者了，想办法再将反射隐藏操作隐藏起来，将Driver隐藏起来。这个时候就需要一个类来完成，通过这个类能够得到具体的Connection，而些Connection能来自不同的数据库厂商，因此它能够管理众多的数据库驱动。而数据库驱动本身也应该到这样一个类中注册。实现代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> DriverManager&#123;</span><br><span class="line">    List&lt;Driver&gt; lists = <span class="keyword">new</span> ArrayList&lt;Driver&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Driver driver)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!registeredDrivers.contains(driver))&#123;</span><br><span class="line">            registeredDrivers.add(driver);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">(String url,String user,String password)</span></span>&#123;</span><br><span class="line">        Properties info = <span class="keyword">new</span> Properties();</span><br><span class="line">        info.put(<span class="string">"user"</span>,user);</span><br><span class="line">        info.put(<span class="string">"password"</span>,password);</span><br><span class="line">        <span class="keyword">for</span>(Driver driver:registeredDrivers)&#123;</span><br><span class="line">            Connection conn = driver.getConnection(url,info);</span><br><span class="line">            <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> conn;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"can't create a connection"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="过程回顾"><a href="#过程回顾" class="headerlink" title="过程回顾"></a>过程回顾</h3><p>JDBC如何从面向实现编程到完全的面向接口编程的。</p><ol><li>在出现面向实现编程的问题时，首先使用简单工厂这样一个抽象层使得通具体实现的解耦</li><li>在简单工厂需要频繁在代码中修改的时候使用数据驱动的方式使得修改的内容与类解耦</li><li>这样各大厂商的<code>Connection</code>的创建是由第三方来维护的，没有体现职责分明，就需要使用工厂方法，由<code>JDBC</code>定义接口<code>Driver</code>，将创建<code>Connection</code>的方法交给具体厂商实现。</li><li>上面已经可以解耦了，但是为了屏蔽反射细节，就使用<code>DriverManager</code>来统一管理驱动</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;更有利于了解JDBC建立链接过程的API&lt;br&gt;
    
    </summary>
    
    
      <category term="jdbc" scheme="http://www.maoxin.site/tags/jdbc/"/>
    
  </entry>
  
</feed>
